

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon May 14 12:54:14 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0008                     	;# 
    46  0009                     	;# 
    47  000A                     	;# 
    48  000B                     	;# 
    49  000C                     	;# 
    50  000D                     	;# 
    51  000E                     	;# 
    52  000E                     	;# 
    53  000F                     	;# 
    54  0010                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0013                     	;# 
    58  0014                     	;# 
    59  0015                     	;# 
    60  0015                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001B                     	;# 
    67  001B                     	;# 
    68  001C                     	;# 
    69  001D                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  0081                     	;# 
    73  0085                     	;# 
    74  0086                     	;# 
    75  0087                     	;# 
    76  0088                     	;# 
    77  0089                     	;# 
    78  008C                     	;# 
    79  008D                     	;# 
    80  008E                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0093                     	;# 
    84  0094                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009E                     	;# 
    90  009F                     	;# 
    91  010C                     	;# 
    92  010D                     	;# 
    93  010E                     	;# 
    94  010F                     	;# 
    95  018C                     	;# 
    96  018D                     	;# 
    97                           
    98                           	psect	idataBANK0
    99  0088                     __pidataBANK0:	
   100                           
   101                           ;initializer for _date
   102  0088  3406               	retlw	6
   103  0089  3400               	retlw	0
   104                           
   105                           ;initializer for _hour
   106  008A  340A               	retlw	10
   107  008B  3400               	retlw	0
   108                           
   109                           ;initializer for _min
   110  008C  3437               	retlw	55
   111  008D  3400               	retlw	0
   112                           
   113                           ;initializer for _month
   114  008E  3405               	retlw	5
   115  008F  3400               	retlw	0
   116                           
   117                           ;initializer for _year
   118  0090  3412               	retlw	18
   119  0091  3400               	retlw	0
   120                           
   121                           ;initializer for _pos
   122  0092  3408               	retlw	8
   123  0013                     _SSPBUF	set	19
   124  0014                     _SSPCON	set	20
   125  0030                     _RB0	set	48
   126  0031                     _RB1	set	49
   127  0032                     _RB2	set	50
   128  0033                     _RB3	set	51
   129  0034                     _RB4	set	52
   130  0041                     _RD1	set	65
   131  0042                     _RD2	set	66
   132  0043                     _RD3	set	67
   133  0044                     _RD4	set	68
   134  0045                     _RD5	set	69
   135  0046                     _RD6	set	70
   136  0047                     _RD7	set	71
   137  0081                     _OPTION_REG	set	129
   138  0093                     _SSPADD	set	147
   139  0091                     _SSPCON2	set	145
   140  0094                     _SSPSTAT	set	148
   141  0086                     _TRISB	set	134
   142  0088                     _TRISD	set	136
   143  048D                     _ACKDT	set	1165
   144  048C                     _ACKEN	set	1164
   145  048A                     _PEN	set	1162
   146  048B                     _RCEN	set	1163
   147  0488                     _SEN	set	1160
   148  043B                     _TRISC3	set	1083
   149  043C                     _TRISC4	set	1084
   150                           
   151                           	psect	strings
   152  0003                     __pstrings:	
   153  0003                     stringtab:	
   154  0003                     __stringtab:	
   155  0003                     stringcode:	
   156                           ;	String table - string pointers are 1 byte each
   157                           
   158  0003                     stringdir:	
   159  0003  3000               	movlw	high stringdir
   160  0004  008A               	movwf	10
   161  0005  0804               	movf	4,w
   162  0006  0A84               	incf	4,f
   163  0007  0782               	addwf	2,f
   164  0008                     __stringbase:	
   165  0008  3400               	retlw	0
   166  0009                     __end_of__stringtab:	
   167  0009                     STR_2:	
   168  0009  3420               	retlw	32	;' '
   169  000A  342D               	retlw	45	;'-'
   170  000B  3443               	retlw	67	;'C'
   171  000C  3469               	retlw	105	;'i'
   172  000D  3472               	retlw	114	;'r'
   173  000E  3463               	retlw	99	;'c'
   174  000F  3475               	retlw	117	;'u'
   175  0010  3469               	retlw	105	;'i'
   176  0011  3474               	retlw	116	;'t'
   177  0012  3420               	retlw	32	;' '
   178  0013  3444               	retlw	68	;'D'
   179  0014  3469               	retlw	105	;'i'
   180  0015  3467               	retlw	103	;'g'
   181  0016  3465               	retlw	101	;'e'
   182  0017  3473               	retlw	115	;'s'
   183  0018  3474               	retlw	116	;'t'
   184  0019  3400               	retlw	0
   185  001A                     STR_1:	
   186  001A  3441               	retlw	65	;'A'
   187  001B  346C               	retlw	108	;'l'
   188  001C  3461               	retlw	97	;'a'
   189  001D  3472               	retlw	114	;'r'
   190  001E  346D               	retlw	109	;'m'
   191  001F  3420               	retlw	32	;' '
   192  0020  3443               	retlw	67	;'C'
   193  0021  346C               	retlw	108	;'l'
   194  0022  346F               	retlw	111	;'o'
   195  0023  3463               	retlw	99	;'c'
   196  0024  346B               	retlw	107	;'k'
   197  0025  3400               	retlw	0
   198  0026                     STR_4:	
   199  0026  3441               	retlw	65	;'A'
   200  0027  346C               	retlw	108	;'l'
   201  0028  3461               	retlw	97	;'a'
   202  0029  3472               	retlw	114	;'r'
   203  002A  346D               	retlw	109	;'m'
   204  002B  343A               	retlw	58	;':'
   205  002C  3420               	retlw	32	;' '
   206  002D  3400               	retlw	0
   207  002E                     STR_3:	
   208  002E  3454               	retlw	84	;'T'
   209  002F  3449               	retlw	73	;'I'
   210  0030  344D               	retlw	77	;'M'
   211  0031  3445               	retlw	69	;'E'
   212  0032  343A               	retlw	58	;':'
   213  0033  3420               	retlw	32	;' '
   214  0034  3400               	retlw	0
   215                           
   216                           ; #config settings
   217  0000                     
   218                           	psect	cinit
   219  07E8                     start_initialization:	
   220  07E8                     __initialization:	
   221                           
   222                           ; Initialize objects allocated to BANK0
   223  07E8  1383               	bcf	3,7	;select IRP bank0
   224  07E9  305A               	movlw	low (__pdataBANK0+11)
   225  07EA  00FD               	movwf	btemp+-1
   226  07EB  3000               	movlw	high __pidataBANK0
   227  07EC  00FE               	movwf	btemp
   228  07ED  3088               	movlw	low __pidataBANK0
   229  07EE  00FF               	movwf	btemp+1
   230  07EF  304F               	movlw	low __pdataBANK0
   231  07F0  0084               	movwf	4
   232  07F1  120A  118A  2097  120A  118A  	fcall	init_ram0
   233                           
   234                           ; Clear objects allocated to BANK0
   235  07F6  303E               	movlw	low __pbssBANK0
   236  07F7  0084               	movwf	4
   237  07F8  304F               	movlw	low (__pbssBANK0+17)
   238  07F9  120A  118A  206C   	fcall	clear_ram0
   239  07FC                     end_of_initialization:	
   240                           ;End of C runtime variable initialization code
   241                           
   242  07FC                     __end_of__initialization:	
   243  07FC  0183               	clrf	3
   244  07FD  120A  118A  2DBA   	ljmp	_main	;jump to C main() function
   245                           
   246                           	psect	bssBANK0
   247  003E                     __pbssBANK0:	
   248  003E                     _alarm_val:	
   249  003E                     	ds	8
   250  0046                     _sec:	
   251  0046                     	ds	2
   252  0048                     _alarm_h0:	
   253  0048                     	ds	1
   254  0049                     _alarm_h1:	
   255  0049                     	ds	1
   256  004A                     _alarm_m0:	
   257  004A                     	ds	1
   258  004B                     _alarm_m1:	
   259  004B                     	ds	1
   260  004C                     _jump:	
   261  004C                     	ds	1
   262  004D                     _set_alarm:	
   263  004D                     	ds	1
   264  004E                     _trigger_alarm:	
   265  004E                     	ds	1
   266                           
   267                           	psect	dataBANK0
   268  004F                     __pdataBANK0:	
   269  004F                     _date:	
   270  004F                     	ds	2
   271  0051                     _hour:	
   272  0051                     	ds	2
   273  0053                     _min:	
   274  0053                     	ds	2
   275  0055                     _month:	
   276  0055                     	ds	2
   277  0057                     _year:	
   278  0057                     	ds	2
   279  0059                     _pos:	
   280  0059                     	ds	1
   281                           
   282                           	psect	inittext
   283  0093                     init_fetch0:	
   284                           ;	Called with low address in FSR and high address in W
   285                           
   286  0093  087E               	movf	126,w
   287  0094  008A               	movwf	10
   288  0095  087F               	movf	127,w
   289  0096  0082               	movwf	2
   290  0097                     init_ram0:	
   291                           ;Called with:
   292                           ;	high address of idata address in btemp 
   293                           ;	low address of idata address in btemp+1 
   294                           ;	low address of data in FSR
   295                           ;	high address + 1 of data in btemp-1
   296                           
   297  0097  2093  120A  118A   	fcall	init_fetch0
   298  009A  0080               	movwf	0
   299  009B  0A84               	incf	4,f
   300  009C  0804               	movf	4,w
   301  009D  067D               	xorwf	125,w
   302  009E  1903               	btfsc	3,2
   303  009F  3400               	retlw	0
   304  00A0  0AFF               	incf	127,f
   305  00A1  1903               	btfsc	3,2
   306  00A2  0AFE               	incf	126,f
   307  00A3  2897               	goto	init_ram0
   308                           
   309                           	psect	clrtext
   310  006C                     clear_ram0:	
   311                           ;	Called with FSR containing the base address, and
   312                           ;	W with the last address+1
   313                           
   314  006C  0064               	clrwdt	;clear the watchdog before getting into this loop
   315  006D                     clrloop0:	
   316  006D  0180               	clrf	0	;clear RAM location pointed to by FSR
   317  006E  0A84               	incf	4,f	;increment pointer
   318  006F  0604               	xorwf	4,w	;XOR with final address
   319  0070  1903               	btfsc	3,2	;have we reached the end yet?
   320  0071  3400               	retlw	0	;all done for this memory range, return
   321  0072  0604               	xorwf	4,w	;XOR again to restore value
   322  0073  286D               	goto	clrloop0	;do the next byte
   323                           
   324                           	psect	cstackCOMMON
   325  0070                     __pcstackCOMMON:	
   326  0070                     ?_Lcd_SetBit:	
   327  0070                     ??_Lcd_SetBit:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_Lcd_Cmd:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_Lcd_Start:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_Lcd_Print_Char:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_Lcd_Print_String:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_I2C_Hold:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ??_I2C_Hold:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_I2C_Begin:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ??_I2C_Begin:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_I2C_End:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ??_I2C_End:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_Set_Time_Date:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_Update_Current_Date_Time:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_Lcd_Clear:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_I2C_Read:	
   370                           ; 2 bytes @ 0x0
   371                           
   372  0070                     ?_main:	
   373                           ; 2 bytes @ 0x0
   374                           
   375  0070                     ?___wmul:	
   376                           ; 2 bytes @ 0x0
   377                           
   378  0070                     ?___awdiv:	
   379                           ; 2 bytes @ 0x0
   380                           
   381  0070                     ?___awmod:	
   382                           ; 2 bytes @ 0x0
   383                           
   384  0070                     ?___lmul:	
   385                           ; 2 bytes @ 0x0
   386                           
   387  0070                     Lcd_SetBit@data_bit:	
   388                           ; 4 bytes @ 0x0
   389                           
   390  0070                     I2C_Read@ack:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ___wmul@multiplier:	
   394                           ; 2 bytes @ 0x0
   395                           
   396  0070                     ___awdiv@divisor:	
   397                           ; 2 bytes @ 0x0
   398                           
   399  0070                     ___awmod@divisor:	
   400                           ; 2 bytes @ 0x0
   401                           
   402  0070                     ___lmul@multiplier:	
   403                           ; 2 bytes @ 0x0
   404                           
   405                           
   406                           ; 4 bytes @ 0x0
   407  0070                     	ds	1
   408  0071                     ??_Lcd_Cmd:	
   409  0071                     ??_Lcd_Print_Char:	
   410                           ; 1 bytes @ 0x1
   411                           
   412                           
   413                           ; 1 bytes @ 0x1
   414  0071                     	ds	1
   415  0072                     ??_I2C_Read:	
   416  0072                     Lcd_Print_Char@Lower_Nibble:	
   417                           ; 1 bytes @ 0x2
   418                           
   419  0072                     ___wmul@multiplicand:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0072                     ___awdiv@dividend:	
   423                           ; 2 bytes @ 0x2
   424                           
   425  0072                     ___awmod@dividend:	
   426                           ; 2 bytes @ 0x2
   427                           
   428                           
   429                           ; 2 bytes @ 0x2
   430  0072                     	ds	1
   431  0073                     Lcd_Cmd@a:	
   432  0073                     Lcd_Print_Char@Upper_Nibble:	
   433                           ; 1 bytes @ 0x3
   434                           
   435                           
   436                           ; 1 bytes @ 0x3
   437  0073                     	ds	1
   438  0074                     ??_Lcd_Clear:	
   439  0074                     ?_Lcd_Set_Cursor:	
   440                           ; 1 bytes @ 0x4
   441                           
   442  0074                     ??_Lcd_Start:	
   443                           ; 1 bytes @ 0x4
   444                           
   445  0074                     ??___wmul:	
   446                           ; 1 bytes @ 0x4
   447                           
   448  0074                     ??___awdiv:	
   449                           ; 1 bytes @ 0x4
   450                           
   451  0074                     ??___awmod:	
   452                           ; 1 bytes @ 0x4
   453                           
   454  0074                     Lcd_Set_Cursor@b:	
   455                           ; 1 bytes @ 0x4
   456                           
   457  0074                     Lcd_Print_Char@data:	
   458                           ; 1 bytes @ 0x4
   459                           
   460  0074                     I2C_Read@incoming:	
   461                           ; 1 bytes @ 0x4
   462                           
   463  0074                     ___wmul@product:	
   464                           ; 2 bytes @ 0x4
   465                           
   466  0074                     ___lmul@multiplicand:	
   467                           ; 2 bytes @ 0x4
   468                           
   469                           
   470                           ; 4 bytes @ 0x4
   471  0074                     	ds	1
   472  0075                     ??_Lcd_Set_Cursor:	
   473  0075                     ??_Lcd_Print_String:	
   474                           ; 1 bytes @ 0x5
   475                           
   476  0075                     ___awdiv@counter:	
   477                           ; 1 bytes @ 0x5
   478                           
   479  0075                     ___awmod@counter:	
   480                           ; 1 bytes @ 0x5
   481                           
   482  0075                     Lcd_Print_String@i:	
   483                           ; 1 bytes @ 0x5
   484                           
   485                           
   486                           ; 2 bytes @ 0x5
   487  0075                     	ds	1
   488  0076                     ?_BCD_2_DEC:	
   489  0076                     ___awdiv@sign:	
   490                           ; 2 bytes @ 0x6
   491                           
   492  0076                     ___awmod@sign:	
   493                           ; 1 bytes @ 0x6
   494                           
   495  0076                     Lcd_Start@i:	
   496                           ; 1 bytes @ 0x6
   497                           
   498  0076                     BCD_2_DEC@to_convert:	
   499                           ; 2 bytes @ 0x6
   500                           
   501                           
   502                           ; 2 bytes @ 0x6
   503  0076                     	ds	1
   504  0077                     Lcd_Set_Cursor@a:	
   505  0077                     Lcd_Print_String@a:	
   506                           ; 1 bytes @ 0x7
   507                           
   508  0077                     ___awdiv@quotient:	
   509                           ; 1 bytes @ 0x7
   510                           
   511                           
   512                           ; 2 bytes @ 0x7
   513  0077                     	ds	1
   514  0078                     ??_BCD_2_DEC:	
   515  0078                     ??___lmul:	
   516                           ; 1 bytes @ 0x8
   517                           
   518  0078                     Lcd_Set_Cursor@z:	
   519                           ; 1 bytes @ 0x8
   520                           
   521                           
   522                           ; 1 bytes @ 0x8
   523  0078                     	ds	1
   524  0079                     ?_DEC_2_BCD:	
   525  0079                     Lcd_Set_Cursor@y:	
   526                           ; 2 bytes @ 0x9
   527                           
   528  0079                     DEC_2_BCD@to_convert:	
   529                           ; 1 bytes @ 0x9
   530                           
   531  0079                     ___lmul@product:	
   532                           ; 2 bytes @ 0x9
   533                           
   534                           
   535                           ; 4 bytes @ 0x9
   536  0079                     	ds	1
   537  007A                     Lcd_Set_Cursor@temp:	
   538                           
   539                           ; 1 bytes @ 0xA
   540  007A                     	ds	1
   541  007B                     ??_DEC_2_BCD:	
   542                           
   543                           ; 1 bytes @ 0xB
   544  007B                     	ds	2
   545  007D                     ??_I2C_Write:	
   546  007D                     ??_Set_Time_Date:	
   547                           ; 1 bytes @ 0xD
   548                           
   549  007D                     ??_Update_Current_Date_Time:	
   550                           ; 1 bytes @ 0xD
   551                           
   552  007D                     ??___lldiv:	
   553                           ; 1 bytes @ 0xD
   554                           
   555                           
   556                           ; 1 bytes @ 0xD
   557  007D                     	ds	1
   558                           
   559                           	psect	cstackBANK0
   560  0020                     __pcstackBANK0:	
   561  0020                     ?_I2C_Write:	
   562  0020                     ?___lldiv:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0020                     I2C_Write@data:	
   566                           ; 4 bytes @ 0x0
   567                           
   568  0020                     ___lldiv@divisor:	
   569                           ; 2 bytes @ 0x0
   570                           
   571                           
   572                           ; 4 bytes @ 0x0
   573  0020                     	ds	4
   574  0024                     ___lldiv@dividend:	
   575                           
   576                           ; 4 bytes @ 0x4
   577  0024                     	ds	4
   578  0028                     ___lldiv@quotient:	
   579                           
   580                           ; 4 bytes @ 0x8
   581  0028                     	ds	4
   582  002C                     ___lldiv@counter:	
   583                           
   584                           ; 1 bytes @ 0xC
   585  002C                     	ds	1
   586  002D                     ?_I2C_Initialize:	
   587  002D                     I2C_Initialize@feq_K:	
   588                           ; 1 bytes @ 0xD
   589                           
   590                           
   591                           ; 4 bytes @ 0xD
   592  002D                     	ds	4
   593  0031                     ??_I2C_Initialize:	
   594                           
   595                           ; 1 bytes @ 0x11
   596  0031                     	ds	4
   597  0035                     ??_main:	
   598                           
   599                           ; 1 bytes @ 0x15
   600  0035                     	ds	3
   601  0038                     main@sec_0:	
   602                           
   603                           ; 1 bytes @ 0x18
   604  0038                     	ds	1
   605  0039                     main@sec_1:	
   606                           
   607                           ; 1 bytes @ 0x19
   608  0039                     	ds	1
   609  003A                     main@min_0:	
   610                           
   611                           ; 1 bytes @ 0x1A
   612  003A                     	ds	1
   613  003B                     main@min_1:	
   614                           
   615                           ; 1 bytes @ 0x1B
   616  003B                     	ds	1
   617  003C                     main@hour_0:	
   618                           
   619                           ; 1 bytes @ 0x1C
   620  003C                     	ds	1
   621  003D                     main@hour_1:	
   622                           
   623                           ; 1 bytes @ 0x1D
   624  003D                     	ds	1
   625                           
   626                           	psect	maintext
   627  05BA                     __pmaintext:	
   628 ;;
   629 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   630 ;;
   631 ;; *************** function _main *****************
   632 ;; Defined at:
   633 ;;		line 63 in file "Alarm clock PIC.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;		None
   636 ;; Auto vars:     Size  Location     Type
   637 ;;  hour_1          1   29[BANK0 ] unsigned char 
   638 ;;  hour_0          1   28[BANK0 ] unsigned char 
   639 ;;  min_1           1   27[BANK0 ] unsigned char 
   640 ;;  min_0           1   26[BANK0 ] unsigned char 
   641 ;;  sec_1           1   25[BANK0 ] unsigned char 
   642 ;;  sec_0           1   24[BANK0 ] unsigned char 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  2  160[None  ] int 
   645 ;; Registers used:
   646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : B00/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   652 ;;      Params:         0       0       0       0       0
   653 ;;      Locals:         0       6       0       0       0
   654 ;;      Temps:          0       3       0       0       0
   655 ;;      Totals:         0       9       0       0       0
   656 ;;Total ram usage:        9 bytes
   657 ;; Hardware stack levels required when called:    3
   658 ;; This function calls:
   659 ;;		_I2C_Initialize
   660 ;;		_Lcd_Clear
   661 ;;		_Lcd_Print_Char
   662 ;;		_Lcd_Print_String
   663 ;;		_Lcd_Set_Cursor
   664 ;;		_Lcd_Start
   665 ;;		_Set_Time_Date
   666 ;;		_Update_Current_Date_Time
   667 ;;		___awdiv
   668 ;;		___awmod
   669 ;; This function is called by:
   670 ;;		Startup code after reset
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           
   675                           ;psect for function _main
   676  05BA                     _main:	
   677                           
   678                           ;Alarm clock PIC.c: 65: TRISD = 0x00;
   679                           
   680                           ;incstack = 0
   681                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   682  05BA  1683               	bsf	3,5	;RP0=1, select bank1
   683  05BB  1303               	bcf	3,6	;RP1=0, select bank1
   684  05BC  0188               	clrf	8	;volatile
   685                           
   686                           ;Alarm clock PIC.c: 66: TRISB = 0xFF;
   687  05BD  30FF               	movlw	255
   688  05BE  0086               	movwf	6	;volatile
   689                           
   690                           ;Alarm clock PIC.c: 67: OPTION_REG = 0b00000000;
   691  05BF  0181               	clrf	1	;volatile
   692                           
   693                           ;Alarm clock PIC.c: 68: RD1 = 0;
   694  05C0  1283               	bcf	3,5	;RP0=0, select bank0
   695  05C1  1303               	bcf	3,6	;RP1=0, select bank0
   696  05C2  1088               	bcf	8,1	;volatile
   697                           
   698                           ;Alarm clock PIC.c: 70: Lcd_Start();
   699  05C3  120A  118A  23AF  120A  118A  	fcall	_Lcd_Start
   700                           
   701                           ;Alarm clock PIC.c: 72: I2C_Initialize(100);
   702  05C8  3000               	movlw	0
   703  05C9  1283               	bcf	3,5	;RP0=0, select bank0
   704  05CA  1303               	bcf	3,6	;RP1=0, select bank0
   705  05CB  00B0               	movwf	I2C_Initialize@feq_K+3
   706  05CC  3000               	movlw	0
   707  05CD  00AF               	movwf	I2C_Initialize@feq_K+2
   708  05CE  3000               	movlw	0
   709  05CF  00AE               	movwf	I2C_Initialize@feq_K+1
   710  05D0  3064               	movlw	100
   711  05D1  00AD               	movwf	I2C_Initialize@feq_K
   712  05D2  120A  118A  22A5  120A  118A  	fcall	_I2C_Initialize
   713                           
   714                           ;Alarm clock PIC.c: 75: Set_Time_Date();
   715  05D7  120A  118A  2423  120A  118A  	fcall	_Set_Time_Date
   716                           
   717                           ;Alarm clock PIC.c: 78: Lcd_Clear();
   718  05DC  120A  118A  207D  120A  118A  	fcall	_Lcd_Clear
   719                           
   720                           ;Alarm clock PIC.c: 79: Lcd_Set_Cursor(1,1);
   721  05E1  01F4               	clrf	Lcd_Set_Cursor@b
   722  05E2  0AF4               	incf	Lcd_Set_Cursor@b,f
   723  05E3  3001               	movlw	1
   724  05E4  120A  118A  2210  120A  118A  	fcall	_Lcd_Set_Cursor
   725                           
   726                           ;Alarm clock PIC.c: 80: Lcd_Print_String("Alarm Clock");
   727  05E9  3012               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   728  05EA  120A  118A  20F9  120A  118A  	fcall	_Lcd_Print_String
   729                           
   730                           ;Alarm clock PIC.c: 81: Lcd_Set_Cursor(2,1);
   731  05EF  01F4               	clrf	Lcd_Set_Cursor@b
   732  05F0  0AF4               	incf	Lcd_Set_Cursor@b,f
   733  05F1  3002               	movlw	2
   734  05F2  120A  118A  2210  120A  118A  	fcall	_Lcd_Set_Cursor
   735                           
   736                           ;Alarm clock PIC.c: 82: Lcd_Print_String(" -Circuit Digest");
   737  05F7  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   738  05F8  120A  118A  20F9  120A  118A  	fcall	_Lcd_Print_String
   739                           
   740                           ;Alarm clock PIC.c: 83: _delay((unsigned long)((1500)*(20000000/4000.0)));
   741  05FD  3027               	movlw	39
   742  05FE  1283               	bcf	3,5	;RP0=0, select bank0
   743  05FF  1303               	bcf	3,6	;RP1=0, select bank0
   744  0600  00B7               	movwf	??_main+2
   745  0601  300D               	movlw	13
   746  0602  00B6               	movwf	??_main+1
   747  0603  304B               	movlw	75
   748  0604  00B5               	movwf	??_main
   749  0605                     u1497:	
   750  0605  0BB5               	decfsz	??_main,f
   751  0606  2E05               	goto	u1497
   752  0607  0BB6               	decfsz	??_main+1,f
   753  0608  2E05               	goto	u1497
   754  0609  0BB7               	decfsz	??_main+2,f
   755  060A  2E05               	goto	u1497
   756  060B  0000               	nop
   757  060C                     l1413:	
   758                           ;Alarm clock PIC.c: 85: while (1) {
   759                           
   760                           
   761                           ;Alarm clock PIC.c: 87: Update_Current_Date_Time();
   762  060C  120A  118A  24D0  120A  118A  	fcall	_Update_Current_Date_Time
   763                           
   764                           ;Alarm clock PIC.c: 90: char sec_0 = sec % 10;
   765  0611  300A               	movlw	10
   766  0612  00F0               	movwf	___awmod@divisor
   767  0613  3000               	movlw	0
   768  0614  00F1               	movwf	___awmod@divisor+1
   769  0615  1283               	bcf	3,5	;RP0=0, select bank0
   770  0616  1303               	bcf	3,6	;RP1=0, select bank0
   771  0617  0847               	movf	_sec+1,w
   772  0618  00F3               	movwf	___awmod@dividend+1
   773  0619  0846               	movf	_sec,w
   774  061A  00F2               	movwf	___awmod@dividend
   775  061B  120A  118A  225A  120A  118A  	fcall	___awmod
   776  0620  0870               	movf	?___awmod,w
   777  0621  1283               	bcf	3,5	;RP0=0, select bank0
   778  0622  1303               	bcf	3,6	;RP1=0, select bank0
   779  0623  00B5               	movwf	??_main
   780  0624  0835               	movf	??_main,w
   781  0625  00B8               	movwf	main@sec_0
   782                           
   783                           ;Alarm clock PIC.c: 91: char sec_1 = (sec / 10);
   784  0626  300A               	movlw	10
   785  0627  00F0               	movwf	___awdiv@divisor
   786  0628  3000               	movlw	0
   787  0629  00F1               	movwf	___awdiv@divisor+1
   788  062A  0847               	movf	_sec+1,w
   789  062B  00F3               	movwf	___awdiv@dividend+1
   790  062C  0846               	movf	_sec,w
   791  062D  00F2               	movwf	___awdiv@dividend
   792  062E  120A  118A  22F6  120A  118A  	fcall	___awdiv
   793  0633  0870               	movf	?___awdiv,w
   794  0634  1283               	bcf	3,5	;RP0=0, select bank0
   795  0635  1303               	bcf	3,6	;RP1=0, select bank0
   796  0636  00B5               	movwf	??_main
   797  0637  0835               	movf	??_main,w
   798  0638  00B9               	movwf	main@sec_1
   799                           
   800                           ;Alarm clock PIC.c: 92: char min_0 = min % 10;
   801  0639  300A               	movlw	10
   802  063A  00F0               	movwf	___awmod@divisor
   803  063B  3000               	movlw	0
   804  063C  00F1               	movwf	___awmod@divisor+1
   805  063D  0854               	movf	_min+1,w
   806  063E  00F3               	movwf	___awmod@dividend+1
   807  063F  0853               	movf	_min,w
   808  0640  00F2               	movwf	___awmod@dividend
   809  0641  120A  118A  225A  120A  118A  	fcall	___awmod
   810  0646  0870               	movf	?___awmod,w
   811  0647  1283               	bcf	3,5	;RP0=0, select bank0
   812  0648  1303               	bcf	3,6	;RP1=0, select bank0
   813  0649  00B5               	movwf	??_main
   814  064A  0835               	movf	??_main,w
   815  064B  00BA               	movwf	main@min_0
   816                           
   817                           ;Alarm clock PIC.c: 93: char min_1 = min / 10;
   818  064C  300A               	movlw	10
   819  064D  00F0               	movwf	___awdiv@divisor
   820  064E  3000               	movlw	0
   821  064F  00F1               	movwf	___awdiv@divisor+1
   822  0650  0854               	movf	_min+1,w
   823  0651  00F3               	movwf	___awdiv@dividend+1
   824  0652  0853               	movf	_min,w
   825  0653  00F2               	movwf	___awdiv@dividend
   826  0654  120A  118A  22F6  120A  118A  	fcall	___awdiv
   827  0659  0870               	movf	?___awdiv,w
   828  065A  1283               	bcf	3,5	;RP0=0, select bank0
   829  065B  1303               	bcf	3,6	;RP1=0, select bank0
   830  065C  00B5               	movwf	??_main
   831  065D  0835               	movf	??_main,w
   832  065E  00BB               	movwf	main@min_1
   833                           
   834                           ;Alarm clock PIC.c: 94: char hour_0 = hour % 10;
   835  065F  300A               	movlw	10
   836  0660  00F0               	movwf	___awmod@divisor
   837  0661  3000               	movlw	0
   838  0662  00F1               	movwf	___awmod@divisor+1
   839  0663  0852               	movf	_hour+1,w
   840  0664  00F3               	movwf	___awmod@dividend+1
   841  0665  0851               	movf	_hour,w
   842  0666  00F2               	movwf	___awmod@dividend
   843  0667  120A  118A  225A  120A  118A  	fcall	___awmod
   844  066C  0870               	movf	?___awmod,w
   845  066D  1283               	bcf	3,5	;RP0=0, select bank0
   846  066E  1303               	bcf	3,6	;RP1=0, select bank0
   847  066F  00B5               	movwf	??_main
   848  0670  0835               	movf	??_main,w
   849  0671  00BC               	movwf	main@hour_0
   850                           
   851                           ;Alarm clock PIC.c: 95: char hour_1 = hour / 10;
   852  0672  300A               	movlw	10
   853  0673  00F0               	movwf	___awdiv@divisor
   854  0674  3000               	movlw	0
   855  0675  00F1               	movwf	___awdiv@divisor+1
   856  0676  0852               	movf	_hour+1,w
   857  0677  00F3               	movwf	___awdiv@dividend+1
   858  0678  0851               	movf	_hour,w
   859  0679  00F2               	movwf	___awdiv@dividend
   860  067A  120A  118A  22F6  120A  118A  	fcall	___awdiv
   861  067F  0870               	movf	?___awdiv,w
   862  0680  1283               	bcf	3,5	;RP0=0, select bank0
   863  0681  1303               	bcf	3,6	;RP1=0, select bank0
   864  0682  00B5               	movwf	??_main
   865  0683  0835               	movf	??_main,w
   866  0684  00BD               	movwf	main@hour_1
   867                           
   868                           ;Alarm clock PIC.c: 99: Lcd_Clear();
   869  0685  120A  118A  207D  120A  118A  	fcall	_Lcd_Clear
   870                           
   871                           ;Alarm clock PIC.c: 100: Lcd_Set_Cursor(1, 1);
   872  068A  01F4               	clrf	Lcd_Set_Cursor@b
   873  068B  0AF4               	incf	Lcd_Set_Cursor@b,f
   874  068C  3001               	movlw	1
   875  068D  120A  118A  2210  120A  118A  	fcall	_Lcd_Set_Cursor
   876                           
   877                           ;Alarm clock PIC.c: 101: Lcd_Print_String("TIME: ");
   878  0692  3026               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   879  0693  120A  118A  20F9  120A  118A  	fcall	_Lcd_Print_String
   880                           
   881                           ;Alarm clock PIC.c: 102: Lcd_Print_Char(hour_1 + '0');
   882  0698  1283               	bcf	3,5	;RP0=0, select bank0
   883  0699  1303               	bcf	3,6	;RP1=0, select bank0
   884  069A  083D               	movf	main@hour_1,w
   885  069B  3E30               	addlw	48
   886  069C  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   887                           
   888                           ;Alarm clock PIC.c: 103: Lcd_Print_Char(hour_0 + '0');
   889  06A1  1283               	bcf	3,5	;RP0=0, select bank0
   890  06A2  1303               	bcf	3,6	;RP1=0, select bank0
   891  06A3  083C               	movf	main@hour_0,w
   892  06A4  3E30               	addlw	48
   893  06A5  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   894                           
   895                           ;Alarm clock PIC.c: 104: Lcd_Print_Char(':');
   896  06AA  303A               	movlw	58
   897  06AB  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   898                           
   899                           ;Alarm clock PIC.c: 105: Lcd_Print_Char(min_1 + '0');
   900  06B0  1283               	bcf	3,5	;RP0=0, select bank0
   901  06B1  1303               	bcf	3,6	;RP1=0, select bank0
   902  06B2  083B               	movf	main@min_1,w
   903  06B3  3E30               	addlw	48
   904  06B4  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   905                           
   906                           ;Alarm clock PIC.c: 106: Lcd_Print_Char(min_0 + '0');
   907  06B9  1283               	bcf	3,5	;RP0=0, select bank0
   908  06BA  1303               	bcf	3,6	;RP1=0, select bank0
   909  06BB  083A               	movf	main@min_0,w
   910  06BC  3E30               	addlw	48
   911  06BD  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   912                           
   913                           ;Alarm clock PIC.c: 107: Lcd_Print_Char(':');
   914  06C2  303A               	movlw	58
   915  06C3  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   916                           
   917                           ;Alarm clock PIC.c: 108: Lcd_Print_Char(sec_1 + '0');
   918  06C8  1283               	bcf	3,5	;RP0=0, select bank0
   919  06C9  1303               	bcf	3,6	;RP1=0, select bank0
   920  06CA  0839               	movf	main@sec_1,w
   921  06CB  3E30               	addlw	48
   922  06CC  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   923                           
   924                           ;Alarm clock PIC.c: 109: Lcd_Print_Char(sec_0 + '0');
   925  06D1  1283               	bcf	3,5	;RP0=0, select bank0
   926  06D2  1303               	bcf	3,6	;RP1=0, select bank0
   927  06D3  0838               	movf	main@sec_0,w
   928  06D4  3E30               	addlw	48
   929  06D5  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   930                           
   931                           ;Alarm clock PIC.c: 114: Lcd_Set_Cursor(2, 1);
   932  06DA  01F4               	clrf	Lcd_Set_Cursor@b
   933  06DB  0AF4               	incf	Lcd_Set_Cursor@b,f
   934  06DC  3002               	movlw	2
   935  06DD  120A  118A  2210  120A  118A  	fcall	_Lcd_Set_Cursor
   936                           
   937                           ;Alarm clock PIC.c: 115: Lcd_Print_String("Alarm: ");
   938  06E2  301E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   939  06E3  120A  118A  20F9  120A  118A  	fcall	_Lcd_Print_String
   940                           
   941                           ;Alarm clock PIC.c: 116: Lcd_Print_Char(alarm_val[0] + '0');
   942  06E8  1283               	bcf	3,5	;RP0=0, select bank0
   943  06E9  1303               	bcf	3,6	;RP1=0, select bank0
   944  06EA  083E               	movf	_alarm_val,w
   945  06EB  3E30               	addlw	48
   946  06EC  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   947                           
   948                           ;Alarm clock PIC.c: 117: Lcd_Print_Char(alarm_val[1] + '0');
   949  06F1  1283               	bcf	3,5	;RP0=0, select bank0
   950  06F2  1303               	bcf	3,6	;RP1=0, select bank0
   951  06F3  0840               	movf	_alarm_val+2,w
   952  06F4  3E30               	addlw	48
   953  06F5  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   954                           
   955                           ;Alarm clock PIC.c: 118: Lcd_Print_Char(':');
   956  06FA  303A               	movlw	58
   957  06FB  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   958                           
   959                           ;Alarm clock PIC.c: 119: Lcd_Print_Char(alarm_val[2] + '0');
   960  0700  1283               	bcf	3,5	;RP0=0, select bank0
   961  0701  1303               	bcf	3,6	;RP1=0, select bank0
   962  0702  0842               	movf	_alarm_val+4,w
   963  0703  3E30               	addlw	48
   964  0704  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   965                           
   966                           ;Alarm clock PIC.c: 120: Lcd_Print_Char(alarm_val[3] + '0');
   967  0709  1283               	bcf	3,5	;RP0=0, select bank0
   968  070A  1303               	bcf	3,6	;RP1=0, select bank0
   969  070B  0844               	movf	_alarm_val+6,w
   970  070C  3E30               	addlw	48
   971  070D  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
   972                           
   973                           ;Alarm clock PIC.c: 122: _delay((unsigned long)((50)*(20000000/4000.0)));
   974  0712  3002               	movlw	2
   975  0713  1283               	bcf	3,5	;RP0=0, select bank0
   976  0714  1303               	bcf	3,6	;RP1=0, select bank0
   977  0715  00B7               	movwf	??_main+2
   978  0716  3045               	movlw	69
   979  0717  00B6               	movwf	??_main+1
   980  0718  30A9               	movlw	169
   981  0719  00B5               	movwf	??_main
   982  071A                     u1507:	
   983  071A  0BB5               	decfsz	??_main,f
   984  071B  2F1A               	goto	u1507
   985  071C  0BB6               	decfsz	??_main+1,f
   986  071D  2F1A               	goto	u1507
   987  071E  0BB7               	decfsz	??_main+2,f
   988  071F  2F1A               	goto	u1507
   989  0720  2F21               	nop2
   990                           
   991                           ;Alarm clock PIC.c: 126: if (RB1 == 0 && set_alarm == 0) {
   992  0721  1283               	bcf	3,5	;RP0=0, select bank0
   993  0722  1303               	bcf	3,6	;RP1=0, select bank0
   994  0723  1886               	btfsc	6,1	;volatile
   995  0724  2F2C               	goto	l162
   996  0725  084D               	movf	_set_alarm,w
   997  0726  1D03               	btfss	3,2
   998  0727  2F2C               	goto	l162
   999  0728                     l163:	
  1000                           ;Alarm clock PIC.c: 127: while (!RB1);
  1001                           
  1002  0728  1C86               	btfss	6,1	;volatile
  1003  0729  2F28               	goto	l163
  1004                           
  1005                           ;Alarm clock PIC.c: 128: set_alarm = 1;
  1006  072A  01CD               	clrf	_set_alarm
  1007  072B  0ACD               	incf	_set_alarm,f
  1008  072C                     l162:	
  1009                           
  1010                           ;Alarm clock PIC.c: 129: }
  1011                           ;Alarm clock PIC.c: 130: if (RB1 == 0 && set_alarm == 1) {
  1012  072C  1886               	btfsc	6,1	;volatile
  1013  072D  2F34               	goto	l1477
  1014  072E  034D               	decf	_set_alarm,w
  1015  072F  1D03               	btfss	3,2
  1016  0730  2F34               	goto	l1477
  1017  0731                     l167:	
  1018                           ;Alarm clock PIC.c: 131: while (!RB1);
  1019                           
  1020  0731  1C86               	btfss	6,1	;volatile
  1021  0732  2F31               	goto	l167
  1022                           
  1023                           ;Alarm clock PIC.c: 132: set_alarm = 0;
  1024  0733  01CD               	clrf	_set_alarm
  1025  0734                     l1477:	
  1026                           
  1027                           ;Alarm clock PIC.c: 133: }
  1028                           ;Alarm clock PIC.c: 137: if (set_alarm == 1) {
  1029  0734  034D               	decf	_set_alarm,w
  1030  0735  1D03               	btfss	3,2
  1031  0736  2F84               	goto	l1513
  1032                           
  1033                           ;Alarm clock PIC.c: 138: if (RB0 == 0) {
  1034  0737  1806               	btfsc	6,0	;volatile
  1035  0738  2F3D               	goto	l1485
  1036  0739                     l172:	
  1037                           ;Alarm clock PIC.c: 139: while (!RB0);
  1038                           
  1039  0739  1C06               	btfss	6,0	;volatile
  1040  073A  2F39               	goto	l172
  1041                           
  1042                           ;Alarm clock PIC.c: 140: pos--;
  1043  073B  3001               	movlw	1
  1044  073C  02D9               	subwf	_pos,f
  1045  073D                     l1485:	
  1046                           
  1047                           ;Alarm clock PIC.c: 141: }
  1048                           ;Alarm clock PIC.c: 142: if (RB2 == 0) {
  1049  073D  1906               	btfsc	6,2	;volatile
  1050  073E  2F45               	goto	l1491
  1051  073F                     l176:	
  1052                           ;Alarm clock PIC.c: 143: while (!RB2);
  1053                           
  1054  073F  1D06               	btfss	6,2	;volatile
  1055  0740  2F3F               	goto	l176
  1056                           
  1057                           ;Alarm clock PIC.c: 144: pos++;
  1058  0741  3001               	movlw	1
  1059  0742  00B5               	movwf	??_main
  1060  0743  0835               	movf	??_main,w
  1061  0744  07D9               	addwf	_pos,f
  1062  0745                     l1491:	
  1063                           
  1064                           ;Alarm clock PIC.c: 145: }
  1065                           ;Alarm clock PIC.c: 147: if (pos >= 10)
  1066  0745  300A               	movlw	10
  1067  0746  0259               	subwf	_pos,w
  1068  0747  1C03               	skipc
  1069  0748  2F4C               	goto	l1495
  1070                           
  1071                           ;Alarm clock PIC.c: 148: {
  1072                           ;Alarm clock PIC.c: 149: jump = 1;
  1073  0749  01CC               	clrf	_jump
  1074  074A  0ACC               	incf	_jump,f
  1075                           
  1076                           ;Alarm clock PIC.c: 150: } else
  1077  074B  2F4D               	goto	l1497
  1078  074C                     l1495:	
  1079                           
  1080                           ;Alarm clock PIC.c: 151: jump = 0;
  1081  074C  01CC               	clrf	_jump
  1082  074D                     l1497:	
  1083                           
  1084                           ;Alarm clock PIC.c: 154: if (RB3 == 0) {
  1085  074D  1986               	btfsc	6,3	;volatile
  1086  074E  2F5D               	goto	l1503
  1087  074F                     l182:	
  1088                           ;Alarm clock PIC.c: 155: while (!RB3);
  1089                           
  1090  074F  1D86               	btfss	6,3	;volatile
  1091  0750  2F4F               	goto	l182
  1092                           
  1093                           ;Alarm clock PIC.c: 156: alarm_val[(pos - 8)]++;
  1094  0751  0859               	movf	_pos,w
  1095  0752  00B5               	movwf	??_main
  1096  0753  0735               	addwf	??_main,w
  1097  0754  3EF0               	addlw	240
  1098  0755  3E3E               	addlw	(low (_alarm_val| 0))& (0+255)
  1099  0756  0084               	movwf	4
  1100  0757  3001               	movlw	1
  1101  0758  1383               	bcf	3,7	;select IRP bank0
  1102  0759  0780               	addwf	0,f
  1103  075A  0A84               	incf	4,f
  1104  075B  1803               	skipnc
  1105  075C  0A80               	incf	0,f
  1106  075D                     l1503:	
  1107                           
  1108                           ;Alarm clock PIC.c: 157: }
  1109                           ;Alarm clock PIC.c: 158: if (RB4 == 0) {
  1110  075D  1A06               	btfsc	6,4	;volatile
  1111  075E  2F73               	goto	l1509
  1112  075F                     l186:	
  1113                           ;Alarm clock PIC.c: 159: while (!RB3);
  1114                           
  1115  075F  1D86               	btfss	6,3	;volatile
  1116  0760  2F5F               	goto	l186
  1117                           
  1118                           ;Alarm clock PIC.c: 160: alarm_val[(pos - 8)]--;
  1119  0761  0859               	movf	_pos,w
  1120  0762  00B5               	movwf	??_main
  1121  0763  0735               	addwf	??_main,w
  1122  0764  3EF0               	addlw	240
  1123  0765  3E3E               	addlw	(low (_alarm_val| 0))& (0+255)
  1124  0766  0084               	movwf	4
  1125  0767  30FF               	movlw	255
  1126  0768  1383               	bcf	3,7	;select IRP bank0
  1127  0769  0780               	addwf	0,f
  1128  076A  0F84               	incfsz	4,f
  1129  076B  0800               	movf	0,w
  1130  076C  1803               	skipnc
  1131  076D  0A00               	incf	0,w
  1132  076E  00FF               	movwf	127
  1133  076F  30FF               	movlw	255
  1134  0770  077F               	addwf	127,w
  1135  0771  0080               	movwf	0
  1136  0772  0384               	decf	4,f
  1137  0773                     l1509:	
  1138                           
  1139                           ;Alarm clock PIC.c: 161: }
  1140                           ;Alarm clock PIC.c: 163: Lcd_Set_Cursor(2, pos + jump);
  1141  0773  084C               	movf	_jump,w
  1142  0774  0759               	addwf	_pos,w
  1143  0775  00B5               	movwf	??_main
  1144  0776  0835               	movf	??_main,w
  1145  0777  00F4               	movwf	Lcd_Set_Cursor@b
  1146  0778  3002               	movlw	2
  1147  0779  120A  118A  2210  120A  118A  	fcall	_Lcd_Set_Cursor
  1148                           
  1149                           ;Alarm clock PIC.c: 164: Lcd_Print_Char(95);
  1150  077E  305F               	movlw	95
  1151  077F  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
  1152  0784                     l1513:	
  1153                           
  1154                           ;Alarm clock PIC.c: 165: }
  1155                           ;Alarm clock PIC.c: 168: if (set_alarm == 0 && alarm_val[0] == hour_1 && alarm_val[1] ==
      +                           hour_0 && alarm_val[2] == min_1 && alarm_val[3] == min_0)
  1156  0784  1283               	bcf	3,5	;RP0=0, select bank0
  1157  0785  1303               	bcf	3,6	;RP1=0, select bank0
  1158  0786  084D               	movf	_set_alarm,w
  1159  0787  1D03               	btfss	3,2
  1160  0788  2FB7               	goto	l1525
  1161  0789  083D               	movf	main@hour_1,w
  1162  078A  00B5               	movwf	??_main
  1163  078B  01B6               	clrf	??_main+1
  1164  078C  083F               	movf	_alarm_val+1,w
  1165  078D  0636               	xorwf	??_main+1,w
  1166  078E  1D03               	skipz
  1167  078F  2F92               	goto	u1445
  1168  0790  083E               	movf	_alarm_val,w
  1169  0791  0635               	xorwf	??_main,w
  1170  0792                     u1445:	
  1171  0792  1D03               	skipz
  1172  0793  2FB7               	goto	l1525
  1173  0794  083C               	movf	main@hour_0,w
  1174  0795  00B5               	movwf	??_main
  1175  0796  01B6               	clrf	??_main+1
  1176  0797  0841               	movf	_alarm_val+3,w
  1177  0798  0636               	xorwf	??_main+1,w
  1178  0799  1D03               	skipz
  1179  079A  2F9D               	goto	u1455
  1180  079B  0840               	movf	_alarm_val+2,w
  1181  079C  0635               	xorwf	??_main,w
  1182  079D                     u1455:	
  1183  079D  1D03               	skipz
  1184  079E  2FB7               	goto	l1525
  1185  079F  083B               	movf	main@min_1,w
  1186  07A0  00B5               	movwf	??_main
  1187  07A1  01B6               	clrf	??_main+1
  1188  07A2  0843               	movf	_alarm_val+5,w
  1189  07A3  0636               	xorwf	??_main+1,w
  1190  07A4  1D03               	skipz
  1191  07A5  2FA8               	goto	u1465
  1192  07A6  0842               	movf	_alarm_val+4,w
  1193  07A7  0635               	xorwf	??_main,w
  1194  07A8                     u1465:	
  1195  07A8  1D03               	skipz
  1196  07A9  2FB7               	goto	l1525
  1197  07AA  083A               	movf	main@min_0,w
  1198  07AB  00B5               	movwf	??_main
  1199  07AC  01B6               	clrf	??_main+1
  1200  07AD  0845               	movf	_alarm_val+7,w
  1201  07AE  0636               	xorwf	??_main+1,w
  1202  07AF  1D03               	skipz
  1203  07B0  2FB3               	goto	u1475
  1204  07B1  0844               	movf	_alarm_val+6,w
  1205  07B2  0635               	xorwf	??_main,w
  1206  07B3                     u1475:	
  1207  07B3  1D03               	skipz
  1208  07B4  2FB7               	goto	l1525
  1209                           
  1210                           ;Alarm clock PIC.c: 169: trigger_alarm = 1;
  1211  07B5  01CE               	clrf	_trigger_alarm
  1212  07B6  0ACE               	incf	_trigger_alarm,f
  1213  07B7                     l1525:	
  1214                           
  1215                           ;Alarm clock PIC.c: 172: if (trigger_alarm) {
  1216  07B7  084E               	movf	_trigger_alarm,w
  1217  07B8  1903               	btfsc	3,2
  1218  07B9  2FD8               	goto	l190
  1219                           
  1220                           ;Alarm clock PIC.c: 174: RD1 = 1;
  1221  07BA  1488               	bsf	8,1	;volatile
  1222                           
  1223                           ;Alarm clock PIC.c: 175: _delay((unsigned long)((500)*(20000000/4000.0)));
  1224  07BB  300D               	movlw	13
  1225  07BC  00B7               	movwf	??_main+2
  1226  07BD  30AF               	movlw	175
  1227  07BE  00B6               	movwf	??_main+1
  1228  07BF  30C1               	movlw	193
  1229  07C0  00B5               	movwf	??_main
  1230  07C1                     u1517:	
  1231  07C1  0BB5               	decfsz	??_main,f
  1232  07C2  2FC1               	goto	u1517
  1233  07C3  0BB6               	decfsz	??_main+1,f
  1234  07C4  2FC1               	goto	u1517
  1235  07C5  0BB7               	decfsz	??_main+2,f
  1236  07C6  2FC1               	goto	u1517
  1237  07C7  0000               	nop
  1238                           
  1239                           ;Alarm clock PIC.c: 176: RD1 = 0;
  1240  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  1241  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  1242  07CA  1088               	bcf	8,1	;volatile
  1243                           
  1244                           ;Alarm clock PIC.c: 177: _delay((unsigned long)((500)*(20000000/4000.0)));
  1245  07CB  300D               	movlw	13
  1246  07CC  00B7               	movwf	??_main+2
  1247  07CD  30AF               	movlw	175
  1248  07CE  00B6               	movwf	??_main+1
  1249  07CF  30C1               	movlw	193
  1250  07D0  00B5               	movwf	??_main
  1251  07D1                     u1527:	
  1252  07D1  0BB5               	decfsz	??_main,f
  1253  07D2  2FD1               	goto	u1527
  1254  07D3  0BB6               	decfsz	??_main+1,f
  1255  07D4  2FD1               	goto	u1527
  1256  07D5  0BB7               	decfsz	??_main+2,f
  1257  07D6  2FD1               	goto	u1527
  1258  07D7  0000               	nop
  1259  07D8                     l190:	
  1260                           
  1261                           ;Alarm clock PIC.c: 178: }
  1262                           ;Alarm clock PIC.c: 180: _delay((unsigned long)((200)*(20000000/4000.0)));
  1263  07D8  3006               	movlw	6
  1264  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  1265  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  1266  07DB  00B7               	movwf	??_main+2
  1267  07DC  3013               	movlw	19
  1268  07DD  00B6               	movwf	??_main+1
  1269  07DE  30B1               	movlw	177
  1270  07DF  00B5               	movwf	??_main
  1271  07E0                     u1537:	
  1272  07E0  0BB5               	decfsz	??_main,f
  1273  07E1  2FE0               	goto	u1537
  1274  07E2  0BB6               	decfsz	??_main+1,f
  1275  07E3  2FE0               	goto	u1537
  1276  07E4  0BB7               	decfsz	??_main+2,f
  1277  07E5  2FE0               	goto	u1537
  1278  07E6  2FE7               	nop2
  1279  07E7  2E0C               	goto	l1413
  1280  07E8                     __end_of_main:	
  1281                           ;Alarm clock PIC.c: 182: }
  1282                           ;Alarm clock PIC.c: 184: return 0;
  1283                           ;	Return value of _main is never used
  1284                           
  1285                           
  1286                           	psect	text1
  1287  04D0                     __ptext1:	
  1288 ;; *************** function _Update_Current_Date_Time *****************
  1289 ;; Defined at:
  1290 ;;		line 41 in file "PIC16F877a_DS3231.h"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;		None
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  1    wreg      void 
  1297 ;; Registers used:
  1298 ;;		wreg, status,2, status,0, pclath, cstack
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1304 ;;      Params:         0       0       0       0       0
  1305 ;;      Locals:         0       0       0       0       0
  1306 ;;      Temps:          0       0       0       0       0
  1307 ;;      Totals:         0       0       0       0       0
  1308 ;;Total ram usage:        0 bytes
  1309 ;; Hardware stack levels used:    1
  1310 ;; Hardware stack levels required when called:    2
  1311 ;; This function calls:
  1312 ;;		_BCD_2_DEC
  1313 ;;		_I2C_Begin
  1314 ;;		_I2C_End
  1315 ;;		_I2C_Read
  1316 ;;		_I2C_Write
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           
  1323                           ;psect for function _Update_Current_Date_Time
  1324  04D0                     _Update_Current_Date_Time:	
  1325                           
  1326                           ;PIC16F877a_DS3231.h: 44: I2C_Begin();
  1327                           
  1328                           ;incstack = 0
  1329                           ; Regs used in _Update_Current_Date_Time: [wreg+status,2+status,0+pclath+cstack]
  1330  04D0  120A  118A  2056  120A  118A  	fcall	_I2C_Begin
  1331                           
  1332                           ;PIC16F877a_DS3231.h: 45: I2C_Write(0xD0);
  1333  04D5  30D0               	movlw	208
  1334  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  1335  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  1336  04D8  00A0               	movwf	I2C_Write@data
  1337  04D9  3000               	movlw	0
  1338  04DA  00A1               	movwf	I2C_Write@data+1
  1339  04DB  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1340                           
  1341                           ;PIC16F877a_DS3231.h: 46: I2C_Write(0);
  1342  04E0  3000               	movlw	0
  1343  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1344  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1345  04E3  00A0               	movwf	I2C_Write@data
  1346  04E4  00A1               	movwf	I2C_Write@data+1
  1347  04E5  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1348                           
  1349                           ;PIC16F877a_DS3231.h: 47: I2C_End();
  1350  04EA  120A  118A  205D  120A  118A  	fcall	_I2C_End
  1351                           
  1352                           ;PIC16F877a_DS3231.h: 50: I2C_Begin();
  1353  04EF  120A  118A  2056  120A  118A  	fcall	_I2C_Begin
  1354                           
  1355                           ;PIC16F877a_DS3231.h: 51: I2C_Write(0xD1);
  1356  04F4  30D1               	movlw	209
  1357  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1358  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1359  04F7  00A0               	movwf	I2C_Write@data
  1360  04F8  3000               	movlw	0
  1361  04F9  00A1               	movwf	I2C_Write@data+1
  1362  04FA  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1363                           
  1364                           ;PIC16F877a_DS3231.h: 52: sec = BCD_2_DEC(I2C_Read(1));
  1365  04FF  3001               	movlw	1
  1366  0500  00F0               	movwf	I2C_Read@ack
  1367  0501  3000               	movlw	0
  1368  0502  00F1               	movwf	I2C_Read@ack+1
  1369  0503  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1370  0508  0871               	movf	?_I2C_Read+1,w
  1371  0509  00F7               	movwf	BCD_2_DEC@to_convert+1
  1372  050A  0870               	movf	?_I2C_Read,w
  1373  050B  00F6               	movwf	BCD_2_DEC@to_convert
  1374  050C  120A  118A  211B  120A  118A  	fcall	_BCD_2_DEC
  1375  0511  0877               	movf	?_BCD_2_DEC+1,w
  1376  0512  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0513  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0514  00C7               	movwf	_sec+1
  1379  0515  0876               	movf	?_BCD_2_DEC,w
  1380  0516  00C6               	movwf	_sec
  1381                           
  1382                           ;PIC16F877a_DS3231.h: 53: min = BCD_2_DEC(I2C_Read(1));
  1383  0517  3001               	movlw	1
  1384  0518  00F0               	movwf	I2C_Read@ack
  1385  0519  3000               	movlw	0
  1386  051A  00F1               	movwf	I2C_Read@ack+1
  1387  051B  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1388  0520  0871               	movf	?_I2C_Read+1,w
  1389  0521  00F7               	movwf	BCD_2_DEC@to_convert+1
  1390  0522  0870               	movf	?_I2C_Read,w
  1391  0523  00F6               	movwf	BCD_2_DEC@to_convert
  1392  0524  120A  118A  211B  120A  118A  	fcall	_BCD_2_DEC
  1393  0529  0877               	movf	?_BCD_2_DEC+1,w
  1394  052A  1283               	bcf	3,5	;RP0=0, select bank0
  1395  052B  1303               	bcf	3,6	;RP1=0, select bank0
  1396  052C  00D4               	movwf	_min+1
  1397  052D  0876               	movf	?_BCD_2_DEC,w
  1398  052E  00D3               	movwf	_min
  1399                           
  1400                           ;PIC16F877a_DS3231.h: 54: hour = BCD_2_DEC(I2C_Read(1));
  1401  052F  3001               	movlw	1
  1402  0530  00F0               	movwf	I2C_Read@ack
  1403  0531  3000               	movlw	0
  1404  0532  00F1               	movwf	I2C_Read@ack+1
  1405  0533  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1406  0538  0871               	movf	?_I2C_Read+1,w
  1407  0539  00F7               	movwf	BCD_2_DEC@to_convert+1
  1408  053A  0870               	movf	?_I2C_Read,w
  1409  053B  00F6               	movwf	BCD_2_DEC@to_convert
  1410  053C  120A  118A  211B  120A  118A  	fcall	_BCD_2_DEC
  1411  0541  0877               	movf	?_BCD_2_DEC+1,w
  1412  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1414  0544  00D2               	movwf	_hour+1
  1415  0545  0876               	movf	?_BCD_2_DEC,w
  1416  0546  00D1               	movwf	_hour
  1417                           
  1418                           ;PIC16F877a_DS3231.h: 55: I2C_Read(1);
  1419  0547  3001               	movlw	1
  1420  0548  00F0               	movwf	I2C_Read@ack
  1421  0549  3000               	movlw	0
  1422  054A  00F1               	movwf	I2C_Read@ack+1
  1423  054B  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1424                           
  1425                           ;PIC16F877a_DS3231.h: 56: date = BCD_2_DEC(I2C_Read(1));
  1426  0550  3001               	movlw	1
  1427  0551  00F0               	movwf	I2C_Read@ack
  1428  0552  3000               	movlw	0
  1429  0553  00F1               	movwf	I2C_Read@ack+1
  1430  0554  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1431  0559  0871               	movf	?_I2C_Read+1,w
  1432  055A  00F7               	movwf	BCD_2_DEC@to_convert+1
  1433  055B  0870               	movf	?_I2C_Read,w
  1434  055C  00F6               	movwf	BCD_2_DEC@to_convert
  1435  055D  120A  118A  211B  120A  118A  	fcall	_BCD_2_DEC
  1436  0562  0877               	movf	?_BCD_2_DEC+1,w
  1437  0563  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0564  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0565  00D0               	movwf	_date+1
  1440  0566  0876               	movf	?_BCD_2_DEC,w
  1441  0567  00CF               	movwf	_date
  1442                           
  1443                           ;PIC16F877a_DS3231.h: 57: month = BCD_2_DEC(I2C_Read(1));
  1444  0568  3001               	movlw	1
  1445  0569  00F0               	movwf	I2C_Read@ack
  1446  056A  3000               	movlw	0
  1447  056B  00F1               	movwf	I2C_Read@ack+1
  1448  056C  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1449  0571  0871               	movf	?_I2C_Read+1,w
  1450  0572  00F7               	movwf	BCD_2_DEC@to_convert+1
  1451  0573  0870               	movf	?_I2C_Read,w
  1452  0574  00F6               	movwf	BCD_2_DEC@to_convert
  1453  0575  120A  118A  211B  120A  118A  	fcall	_BCD_2_DEC
  1454  057A  0877               	movf	?_BCD_2_DEC+1,w
  1455  057B  1283               	bcf	3,5	;RP0=0, select bank0
  1456  057C  1303               	bcf	3,6	;RP1=0, select bank0
  1457  057D  00D6               	movwf	_month+1
  1458  057E  0876               	movf	?_BCD_2_DEC,w
  1459  057F  00D5               	movwf	_month
  1460                           
  1461                           ;PIC16F877a_DS3231.h: 58: year = BCD_2_DEC(I2C_Read(1));
  1462  0580  3001               	movlw	1
  1463  0581  00F0               	movwf	I2C_Read@ack
  1464  0582  3000               	movlw	0
  1465  0583  00F1               	movwf	I2C_Read@ack+1
  1466  0584  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1467  0589  0871               	movf	?_I2C_Read+1,w
  1468  058A  00F7               	movwf	BCD_2_DEC@to_convert+1
  1469  058B  0870               	movf	?_I2C_Read,w
  1470  058C  00F6               	movwf	BCD_2_DEC@to_convert
  1471  058D  120A  118A  211B  120A  118A  	fcall	_BCD_2_DEC
  1472  0592  0877               	movf	?_BCD_2_DEC+1,w
  1473  0593  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0594  1303               	bcf	3,6	;RP1=0, select bank0
  1475  0595  00D8               	movwf	_year+1
  1476  0596  0876               	movf	?_BCD_2_DEC,w
  1477  0597  00D7               	movwf	_year
  1478                           
  1479                           ;PIC16F877a_DS3231.h: 59: I2C_End();
  1480  0598  120A  118A  205D  120A  118A  	fcall	_I2C_End
  1481                           
  1482                           ;PIC16F877a_DS3231.h: 62: I2C_Begin();
  1483  059D  120A  118A  2056  120A  118A  	fcall	_I2C_Begin
  1484                           
  1485                           ;PIC16F877a_DS3231.h: 63: I2C_Write(0xD1);
  1486  05A2  30D1               	movlw	209
  1487  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  1488  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  1489  05A5  00A0               	movwf	I2C_Write@data
  1490  05A6  3000               	movlw	0
  1491  05A7  00A1               	movwf	I2C_Write@data+1
  1492  05A8  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1493                           
  1494                           ;PIC16F877a_DS3231.h: 64: I2C_Read(1);
  1495  05AD  3001               	movlw	1
  1496  05AE  00F0               	movwf	I2C_Read@ack
  1497  05AF  3000               	movlw	0
  1498  05B0  00F1               	movwf	I2C_Read@ack+1
  1499  05B1  120A  118A  213E  120A  118A  	fcall	_I2C_Read
  1500                           
  1501                           ;PIC16F877a_DS3231.h: 65: I2C_End();
  1502  05B6  120A  118A  205D   	fcall	_I2C_End
  1503  05B9  0008               	return
  1504  05BA                     __end_of_Update_Current_Date_Time:	
  1505                           
  1506                           	psect	text2
  1507  013E                     __ptext2:	
  1508 ;; *************** function _I2C_Read *****************
  1509 ;; Defined at:
  1510 ;;		line 46 in file "PIC16F877a_I2C.h"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  ack             2    0[COMMON] unsigned short 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  incoming        2    4[COMMON] unsigned short 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2    0[COMMON] unsigned short 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0, pclath, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1524 ;;      Params:         2       0       0       0       0
  1525 ;;      Locals:         2       0       0       0       0
  1526 ;;      Temps:          2       0       0       0       0
  1527 ;;      Totals:         6       0       0       0       0
  1528 ;;Total ram usage:        6 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    1
  1531 ;; This function calls:
  1532 ;;		_I2C_Hold
  1533 ;; This function is called by:
  1534 ;;		_Update_Current_Date_Time
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           
  1539                           ;psect for function _I2C_Read
  1540  013E                     _I2C_Read:	
  1541                           
  1542                           ;PIC16F877a_I2C.h: 48: unsigned short incoming;
  1543                           ;PIC16F877a_I2C.h: 49: I2C_Hold();
  1544                           
  1545                           ;incstack = 0
  1546                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  1547  013E  120A  118A  2074  120A  118A  	fcall	_I2C_Hold
  1548                           
  1549                           ;PIC16F877a_I2C.h: 50: RCEN = 1;
  1550  0143  1683               	bsf	3,5	;RP0=1, select bank1
  1551  0144  1303               	bcf	3,6	;RP1=0, select bank1
  1552  0145  1591               	bsf	17,3	;volatile
  1553                           
  1554                           ;PIC16F877a_I2C.h: 52: I2C_Hold();
  1555  0146  120A  118A  2074  120A  118A  	fcall	_I2C_Hold
  1556                           
  1557                           ;PIC16F877a_I2C.h: 53: incoming = SSPBUF;
  1558  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1559  014C  1303               	bcf	3,6	;RP1=0, select bank0
  1560  014D  0813               	movf	19,w	;volatile
  1561  014E  00F2               	movwf	??_I2C_Read
  1562  014F  01F3               	clrf	??_I2C_Read+1
  1563  0150  0872               	movf	??_I2C_Read,w
  1564  0151  00F4               	movwf	I2C_Read@incoming
  1565  0152  0873               	movf	??_I2C_Read+1,w
  1566  0153  00F5               	movwf	I2C_Read@incoming+1
  1567                           
  1568                           ;PIC16F877a_I2C.h: 55: I2C_Hold();
  1569  0154  120A  118A  2074  120A  118A  	fcall	_I2C_Hold
  1570                           
  1571                           ;PIC16F877a_I2C.h: 56: ACKDT = (ack)?0:1;
  1572  0159  0870               	movf	I2C_Read@ack,w
  1573  015A  0471               	iorwf	I2C_Read@ack+1,w
  1574  015B  1D03               	btfss	3,2
  1575  015C  2961               	goto	u1050
  1576  015D  1683               	bsf	3,5	;RP0=1, select bank1
  1577  015E  1303               	bcf	3,6	;RP1=0, select bank1
  1578  015F  1691               	bsf	17,5	;volatile
  1579  0160  2964               	goto	l1257
  1580  0161                     u1050:	
  1581  0161  1683               	bsf	3,5	;RP0=1, select bank1
  1582  0162  1303               	bcf	3,6	;RP1=0, select bank1
  1583  0163  1291               	bcf	17,5	;volatile
  1584  0164                     l1257:	
  1585                           
  1586                           ;PIC16F877a_I2C.h: 57: ACKEN = 1;
  1587  0164  1611               	bsf	17,4	;volatile
  1588                           
  1589                           ;PIC16F877a_I2C.h: 59: return incoming;
  1590  0165  0875               	movf	I2C_Read@incoming+1,w
  1591  0166  00F1               	movwf	?_I2C_Read+1
  1592  0167  0874               	movf	I2C_Read@incoming,w
  1593  0168  00F0               	movwf	?_I2C_Read
  1594  0169  0008               	return
  1595  016A                     __end_of_I2C_Read:	
  1596                           
  1597                           	psect	text3
  1598  011B                     __ptext3:	
  1599 ;; *************** function _BCD_2_DEC *****************
  1600 ;; Defined at:
  1601 ;;		line 16 in file "PIC16F877a_DS3231.h"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  to_convert      2    6[COMMON] int 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  2    6[COMMON] int 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0, pclath, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1615 ;;      Params:         2       0       0       0       0
  1616 ;;      Locals:         0       0       0       0       0
  1617 ;;      Temps:          2       0       0       0       0
  1618 ;;      Totals:         4       0       0       0       0
  1619 ;;Total ram usage:        4 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    1
  1622 ;; This function calls:
  1623 ;;		___wmul
  1624 ;; This function is called by:
  1625 ;;		_Update_Current_Date_Time
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _BCD_2_DEC
  1631  011B                     _BCD_2_DEC:	
  1632                           
  1633                           ;PIC16F877a_DS3231.h: 18: return (to_convert >> 4) * 10 + (to_convert & 0x0F);
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _BCD_2_DEC: [wreg+status,2+status,0+pclath+cstack]
  1637  011B  300F               	movlw	15
  1638  011C  0576               	andwf	BCD_2_DEC@to_convert,w
  1639  011D  00F8               	movwf	??_BCD_2_DEC
  1640  011E  3000               	movlw	0
  1641  011F  0577               	andwf	BCD_2_DEC@to_convert+1,w
  1642  0120  00F9               	movwf	??_BCD_2_DEC+1
  1643  0121  0E76               	swapf	BCD_2_DEC@to_convert,w
  1644  0122  390F               	andlw	15
  1645  0123  00F0               	movwf	___wmul@multiplier
  1646  0124  0E77               	swapf	BCD_2_DEC@to_convert+1,w
  1647  0125  39F0               	andlw	240
  1648  0126  04F0               	iorwf	___wmul@multiplier,f
  1649  0127  0E77               	swapf	BCD_2_DEC@to_convert+1,w
  1650  0128  390F               	andlw	15
  1651  0129  00F1               	movwf	___wmul@multiplier+1
  1652  012A  30F0               	movlw	240
  1653  012B  1DF1               	btfss	___wmul@multiplier+1,3
  1654  012C  3000               	movlw	0
  1655  012D  04F1               	iorwf	___wmul@multiplier+1,f
  1656  012E  300A               	movlw	10
  1657  012F  00F2               	movwf	___wmul@multiplicand
  1658  0130  3000               	movlw	0
  1659  0131  00F3               	movwf	___wmul@multiplicand+1
  1660  0132  120A  118A  20D8   	fcall	___wmul
  1661  0135  0878               	movf	??_BCD_2_DEC,w
  1662  0136  0770               	addwf	?___wmul,w
  1663  0137  00F6               	movwf	?_BCD_2_DEC
  1664  0138  0879               	movf	??_BCD_2_DEC+1,w
  1665  0139  1803               	skipnc
  1666  013A  0A79               	incf	??_BCD_2_DEC+1,w
  1667  013B  0771               	addwf	?___wmul+1,w
  1668  013C  00F7               	movwf	?_BCD_2_DEC+1
  1669  013D  0008               	return
  1670  013E                     __end_of_BCD_2_DEC:	
  1671                           
  1672                           	psect	text4
  1673  00D8                     __ptext4:	
  1674 ;; *************** function ___wmul *****************
  1675 ;; Defined at:
  1676 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  multiplier      2    0[COMMON] unsigned int 
  1679 ;;  multiplicand    2    2[COMMON] unsigned int 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  product         2    4[COMMON] unsigned int 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  2    0[COMMON] unsigned int 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1691 ;;      Params:         4       0       0       0       0
  1692 ;;      Locals:         2       0       0       0       0
  1693 ;;      Temps:          0       0       0       0       0
  1694 ;;      Totals:         6       0       0       0       0
  1695 ;;Total ram usage:        6 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_BCD_2_DEC
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           
  1705                           ;psect for function ___wmul
  1706  00D8                     ___wmul:	
  1707                           
  1708                           ;incstack = 0
  1709                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1710  00D8  01F4               	clrf	___wmul@product
  1711  00D9  01F5               	clrf	___wmul@product+1
  1712  00DA                     l1111:	
  1713  00DA  1C70               	btfss	___wmul@multiplier,0
  1714  00DB  28E2               	goto	l277
  1715  00DC  0872               	movf	___wmul@multiplicand,w
  1716  00DD  07F4               	addwf	___wmul@product,f
  1717  00DE  1803               	skipnc
  1718  00DF  0AF5               	incf	___wmul@product+1,f
  1719  00E0  0873               	movf	___wmul@multiplicand+1,w
  1720  00E1  07F5               	addwf	___wmul@product+1,f
  1721  00E2                     l277:	
  1722  00E2  3001               	movlw	1
  1723  00E3                     u825:	
  1724  00E3  1003               	clrc
  1725  00E4  0DF2               	rlf	___wmul@multiplicand,f
  1726  00E5  0DF3               	rlf	___wmul@multiplicand+1,f
  1727  00E6  3EFF               	addlw	-1
  1728  00E7  1D03               	skipz
  1729  00E8  28E3               	goto	u825
  1730  00E9  3001               	movlw	1
  1731  00EA                     u835:	
  1732  00EA  1003               	clrc
  1733  00EB  0CF1               	rrf	___wmul@multiplier+1,f
  1734  00EC  0CF0               	rrf	___wmul@multiplier,f
  1735  00ED  3EFF               	addlw	-1
  1736  00EE  1D03               	skipz
  1737  00EF  28EA               	goto	u835
  1738  00F0  0870               	movf	___wmul@multiplier,w
  1739  00F1  0471               	iorwf	___wmul@multiplier+1,w
  1740  00F2  1D03               	btfss	3,2
  1741  00F3  28DA               	goto	l1111
  1742  00F4  0875               	movf	___wmul@product+1,w
  1743  00F5  00F1               	movwf	?___wmul+1
  1744  00F6  0874               	movf	___wmul@product,w
  1745  00F7  00F0               	movwf	?___wmul
  1746  00F8  0008               	return
  1747  00F9                     __end_of___wmul:	
  1748                           
  1749                           	psect	text5
  1750  0423                     __ptext5:	
  1751 ;; *************** function _Set_Time_Date *****************
  1752 ;; Defined at:
  1753 ;;		line 26 in file "PIC16F877a_DS3231.h"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;		None
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;		None
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0, pclath, cstack
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1767 ;;      Params:         0       0       0       0       0
  1768 ;;      Locals:         0       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0
  1770 ;;      Totals:         0       0       0       0       0
  1771 ;;Total ram usage:        0 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    2
  1774 ;; This function calls:
  1775 ;;		_DEC_2_BCD
  1776 ;;		_I2C_Begin
  1777 ;;		_I2C_End
  1778 ;;		_I2C_Write
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           
  1785                           ;psect for function _Set_Time_Date
  1786  0423                     _Set_Time_Date:	
  1787                           
  1788                           ;PIC16F877a_DS3231.h: 28: I2C_Begin();
  1789                           
  1790                           ;incstack = 0
  1791                           ; Regs used in _Set_Time_Date: [wreg+status,2+status,0+pclath+cstack]
  1792  0423  120A  118A  2056  120A  118A  	fcall	_I2C_Begin
  1793                           
  1794                           ;PIC16F877a_DS3231.h: 29: I2C_Write(0xD0);
  1795  0428  30D0               	movlw	208
  1796  0429  1283               	bcf	3,5	;RP0=0, select bank0
  1797  042A  1303               	bcf	3,6	;RP1=0, select bank0
  1798  042B  00A0               	movwf	I2C_Write@data
  1799  042C  3000               	movlw	0
  1800  042D  00A1               	movwf	I2C_Write@data+1
  1801  042E  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1802                           
  1803                           ;PIC16F877a_DS3231.h: 30: I2C_Write(0);
  1804  0433  3000               	movlw	0
  1805  0434  1283               	bcf	3,5	;RP0=0, select bank0
  1806  0435  1303               	bcf	3,6	;RP1=0, select bank0
  1807  0436  00A0               	movwf	I2C_Write@data
  1808  0437  00A1               	movwf	I2C_Write@data+1
  1809  0438  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1810                           
  1811                           ;PIC16F877a_DS3231.h: 31: I2C_Write(DEC_2_BCD(sec));
  1812  043D  1283               	bcf	3,5	;RP0=0, select bank0
  1813  043E  1303               	bcf	3,6	;RP1=0, select bank0
  1814  043F  0847               	movf	_sec+1,w
  1815  0440  00FA               	movwf	DEC_2_BCD@to_convert+1
  1816  0441  0846               	movf	_sec,w
  1817  0442  00F9               	movwf	DEC_2_BCD@to_convert
  1818  0443  120A  118A  216A  120A  118A  	fcall	_DEC_2_BCD
  1819  0448  087A               	movf	?_DEC_2_BCD+1,w
  1820  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1821  044A  1303               	bcf	3,6	;RP1=0, select bank0
  1822  044B  00A1               	movwf	I2C_Write@data+1
  1823  044C  0879               	movf	?_DEC_2_BCD,w
  1824  044D  00A0               	movwf	I2C_Write@data
  1825  044E  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1826                           
  1827                           ;PIC16F877a_DS3231.h: 32: I2C_Write(DEC_2_BCD(min));
  1828  0453  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0454  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0455  0854               	movf	_min+1,w
  1831  0456  00FA               	movwf	DEC_2_BCD@to_convert+1
  1832  0457  0853               	movf	_min,w
  1833  0458  00F9               	movwf	DEC_2_BCD@to_convert
  1834  0459  120A  118A  216A  120A  118A  	fcall	_DEC_2_BCD
  1835  045E  087A               	movf	?_DEC_2_BCD+1,w
  1836  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1837  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1838  0461  00A1               	movwf	I2C_Write@data+1
  1839  0462  0879               	movf	?_DEC_2_BCD,w
  1840  0463  00A0               	movwf	I2C_Write@data
  1841  0464  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1842                           
  1843                           ;PIC16F877a_DS3231.h: 33: I2C_Write(DEC_2_BCD(hour));
  1844  0469  1283               	bcf	3,5	;RP0=0, select bank0
  1845  046A  1303               	bcf	3,6	;RP1=0, select bank0
  1846  046B  0852               	movf	_hour+1,w
  1847  046C  00FA               	movwf	DEC_2_BCD@to_convert+1
  1848  046D  0851               	movf	_hour,w
  1849  046E  00F9               	movwf	DEC_2_BCD@to_convert
  1850  046F  120A  118A  216A  120A  118A  	fcall	_DEC_2_BCD
  1851  0474  087A               	movf	?_DEC_2_BCD+1,w
  1852  0475  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0476  1303               	bcf	3,6	;RP1=0, select bank0
  1854  0477  00A1               	movwf	I2C_Write@data+1
  1855  0478  0879               	movf	?_DEC_2_BCD,w
  1856  0479  00A0               	movwf	I2C_Write@data
  1857  047A  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1858                           
  1859                           ;PIC16F877a_DS3231.h: 34: I2C_Write(1);
  1860  047F  3001               	movlw	1
  1861  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1862  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1863  0482  00A0               	movwf	I2C_Write@data
  1864  0483  3000               	movlw	0
  1865  0484  00A1               	movwf	I2C_Write@data+1
  1866  0485  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1867                           
  1868                           ;PIC16F877a_DS3231.h: 35: I2C_Write(DEC_2_BCD(date));
  1869  048A  1283               	bcf	3,5	;RP0=0, select bank0
  1870  048B  1303               	bcf	3,6	;RP1=0, select bank0
  1871  048C  0850               	movf	_date+1,w
  1872  048D  00FA               	movwf	DEC_2_BCD@to_convert+1
  1873  048E  084F               	movf	_date,w
  1874  048F  00F9               	movwf	DEC_2_BCD@to_convert
  1875  0490  120A  118A  216A  120A  118A  	fcall	_DEC_2_BCD
  1876  0495  087A               	movf	?_DEC_2_BCD+1,w
  1877  0496  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0497  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0498  00A1               	movwf	I2C_Write@data+1
  1880  0499  0879               	movf	?_DEC_2_BCD,w
  1881  049A  00A0               	movwf	I2C_Write@data
  1882  049B  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1883                           
  1884                           ;PIC16F877a_DS3231.h: 36: I2C_Write(DEC_2_BCD(month));
  1885  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  1886  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  1887  04A2  0856               	movf	_month+1,w
  1888  04A3  00FA               	movwf	DEC_2_BCD@to_convert+1
  1889  04A4  0855               	movf	_month,w
  1890  04A5  00F9               	movwf	DEC_2_BCD@to_convert
  1891  04A6  120A  118A  216A  120A  118A  	fcall	_DEC_2_BCD
  1892  04AB  087A               	movf	?_DEC_2_BCD+1,w
  1893  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  1894  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  1895  04AE  00A1               	movwf	I2C_Write@data+1
  1896  04AF  0879               	movf	?_DEC_2_BCD,w
  1897  04B0  00A0               	movwf	I2C_Write@data
  1898  04B1  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1899                           
  1900                           ;PIC16F877a_DS3231.h: 37: I2C_Write(DEC_2_BCD(year));
  1901  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1902  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  1903  04B8  0858               	movf	_year+1,w
  1904  04B9  00FA               	movwf	DEC_2_BCD@to_convert+1
  1905  04BA  0857               	movf	_year,w
  1906  04BB  00F9               	movwf	DEC_2_BCD@to_convert
  1907  04BC  120A  118A  216A  120A  118A  	fcall	_DEC_2_BCD
  1908  04C1  087A               	movf	?_DEC_2_BCD+1,w
  1909  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  1910  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  1911  04C4  00A1               	movwf	I2C_Write@data+1
  1912  04C5  0879               	movf	?_DEC_2_BCD,w
  1913  04C6  00A0               	movwf	I2C_Write@data
  1914  04C7  120A  118A  2064  120A  118A  	fcall	_I2C_Write
  1915                           
  1916                           ;PIC16F877a_DS3231.h: 38: I2C_End();
  1917  04CC  120A  118A  205D   	fcall	_I2C_End
  1918  04CF  0008               	return
  1919  04D0                     __end_of_Set_Time_Date:	
  1920                           
  1921                           	psect	text6
  1922  0064                     __ptext6:	
  1923 ;; *************** function _I2C_Write *****************
  1924 ;; Defined at:
  1925 ;;		line 40 in file "PIC16F877a_I2C.h"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  data            2    0[BANK0 ] unsigned int 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;		None
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0, pclath, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1939 ;;      Params:         0       2       0       0       0
  1940 ;;      Locals:         0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0
  1942 ;;      Totals:         0       2       0       0       0
  1943 ;;Total ram usage:        2 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    1
  1946 ;; This function calls:
  1947 ;;		_I2C_Hold
  1948 ;; This function is called by:
  1949 ;;		_Set_Time_Date
  1950 ;;		_Update_Current_Date_Time
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           
  1955                           ;psect for function _I2C_Write
  1956  0064                     _I2C_Write:	
  1957                           
  1958                           ;PIC16F877a_I2C.h: 42: I2C_Hold();
  1959                           
  1960                           ;incstack = 0
  1961                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  1962  0064  120A  118A  2074   	fcall	_I2C_Hold
  1963                           
  1964                           ;PIC16F877a_I2C.h: 43: SSPBUF = data;
  1965  0067  1283               	bcf	3,5	;RP0=0, select bank0
  1966  0068  1303               	bcf	3,6	;RP1=0, select bank0
  1967  0069  0820               	movf	I2C_Write@data,w
  1968  006A  0093               	movwf	19	;volatile
  1969  006B  0008               	return
  1970  006C                     __end_of_I2C_Write:	
  1971                           
  1972                           	psect	text7
  1973  005D                     __ptext7:	
  1974 ;; *************** function _I2C_End *****************
  1975 ;; Defined at:
  1976 ;;		line 34 in file "PIC16F877a_I2C.h"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;		None
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  1    wreg      void 
  1983 ;; Registers used:
  1984 ;;		wreg, status,2, status,0, pclath, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1990 ;;      Params:         0       0       0       0       0
  1991 ;;      Locals:         0       0       0       0       0
  1992 ;;      Temps:          0       0       0       0       0
  1993 ;;      Totals:         0       0       0       0       0
  1994 ;;Total ram usage:        0 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    1
  1997 ;; This function calls:
  1998 ;;		_I2C_Hold
  1999 ;; This function is called by:
  2000 ;;		_Set_Time_Date
  2001 ;;		_Update_Current_Date_Time
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           
  2006                           ;psect for function _I2C_End
  2007  005D                     _I2C_End:	
  2008                           
  2009                           ;PIC16F877a_I2C.h: 36: I2C_Hold();
  2010                           
  2011                           ;incstack = 0
  2012                           ; Regs used in _I2C_End: [wreg+status,2+status,0+pclath+cstack]
  2013  005D  120A  118A  2074   	fcall	_I2C_Hold
  2014                           
  2015                           ;PIC16F877a_I2C.h: 37: PEN = 1;
  2016  0060  1683               	bsf	3,5	;RP0=1, select bank1
  2017  0061  1303               	bcf	3,6	;RP1=0, select bank1
  2018  0062  1511               	bsf	17,2	;volatile
  2019  0063  0008               	return
  2020  0064                     __end_of_I2C_End:	
  2021                           
  2022                           	psect	text8
  2023  0056                     __ptext8:	
  2024 ;; *************** function _I2C_Begin *****************
  2025 ;; Defined at:
  2026 ;;		line 26 in file "PIC16F877a_I2C.h"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0
  2043 ;;      Totals:         0       0       0       0       0
  2044 ;;Total ram usage:        0 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    1
  2047 ;; This function calls:
  2048 ;;		_I2C_Hold
  2049 ;; This function is called by:
  2050 ;;		_Set_Time_Date
  2051 ;;		_Update_Current_Date_Time
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _I2C_Begin
  2057  0056                     _I2C_Begin:	
  2058                           
  2059                           ;PIC16F877a_I2C.h: 28: I2C_Hold();
  2060                           
  2061                           ;incstack = 0
  2062                           ; Regs used in _I2C_Begin: [wreg+status,2+status,0+pclath+cstack]
  2063  0056  120A  118A  2074   	fcall	_I2C_Hold
  2064                           
  2065                           ;PIC16F877a_I2C.h: 29: SEN = 1;
  2066  0059  1683               	bsf	3,5	;RP0=1, select bank1
  2067  005A  1303               	bcf	3,6	;RP1=0, select bank1
  2068  005B  1411               	bsf	17,0	;volatile
  2069  005C  0008               	return
  2070  005D                     __end_of_I2C_Begin:	
  2071                           
  2072                           	psect	text9
  2073  0074                     __ptext9:	
  2074 ;; *************** function _I2C_Hold *****************
  2075 ;; Defined at:
  2076 ;;		line 21 in file "PIC16F877a_I2C.h"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, status,2
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         0       0       0       0       0
  2091 ;;      Locals:         0       0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0
  2093 ;;      Totals:         0       0       0       0       0
  2094 ;;Total ram usage:        0 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_I2C_Begin
  2100 ;;		_I2C_End
  2101 ;;		_I2C_Write
  2102 ;;		_I2C_Read
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _I2C_Hold
  2108  0074                     _I2C_Hold:	
  2109  0074                     l1105:	
  2110                           ;PIC16F877a_I2C.h: 23: while ( (SSPCON2 & 0b00011111) || (SSPSTAT & 0b00000100) ) ;
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _I2C_Hold: [wreg+status,2]
  2114                           
  2115  0074  1683               	bsf	3,5	;RP0=1, select bank1
  2116  0075  1303               	bcf	3,6	;RP1=0, select bank1
  2117  0076  0811               	movf	17,w	;volatile
  2118  0077  391F               	andlw	31
  2119  0078  1D03               	btfss	3,2
  2120  0079  2874               	goto	l1105
  2121  007A  1D14               	btfss	20,2	;volatile
  2122  007B  0008               	return
  2123  007C  2874               	goto	l1105
  2124  007D                     __end_of_I2C_Hold:	
  2125                           
  2126                           	psect	text10
  2127  016A                     __ptext10:	
  2128 ;; *************** function _DEC_2_BCD *****************
  2129 ;; Defined at:
  2130 ;;		line 21 in file "PIC16F877a_DS3231.h"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;  to_convert      2    9[COMMON] int 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;		None
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  2    9[COMMON] int 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0, pclath, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2144 ;;      Params:         2       0       0       0       0
  2145 ;;      Locals:         0       0       0       0       0
  2146 ;;      Temps:          2       0       0       0       0
  2147 ;;      Totals:         4       0       0       0       0
  2148 ;;Total ram usage:        4 bytes
  2149 ;; Hardware stack levels used:    1
  2150 ;; Hardware stack levels required when called:    1
  2151 ;; This function calls:
  2152 ;;		___awdiv
  2153 ;;		___awmod
  2154 ;; This function is called by:
  2155 ;;		_Set_Time_Date
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _DEC_2_BCD
  2161  016A                     _DEC_2_BCD:	
  2162                           
  2163                           ;PIC16F877a_DS3231.h: 23: return ((to_convert / 10) << 4) + (to_convert % 10);
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in _DEC_2_BCD: [wreg+status,2+status,0+pclath+cstack]
  2167  016A  300A               	movlw	10
  2168  016B  00F0               	movwf	___awdiv@divisor
  2169  016C  3000               	movlw	0
  2170  016D  00F1               	movwf	___awdiv@divisor+1
  2171  016E  087A               	movf	DEC_2_BCD@to_convert+1,w
  2172  016F  00F3               	movwf	___awdiv@dividend+1
  2173  0170  0879               	movf	DEC_2_BCD@to_convert,w
  2174  0171  00F2               	movwf	___awdiv@dividend
  2175  0172  120A  118A  22F6  120A  118A  	fcall	___awdiv
  2176  0177  0870               	movf	?___awdiv,w
  2177  0178  00FB               	movwf	??_DEC_2_BCD
  2178  0179  0871               	movf	?___awdiv+1,w
  2179  017A  00FC               	movwf	??_DEC_2_BCD+1
  2180  017B  0EFB               	swapf	??_DEC_2_BCD,f
  2181  017C  0EFC               	swapf	??_DEC_2_BCD+1,f
  2182  017D  30F0               	movlw	240
  2183  017E  05FC               	andwf	??_DEC_2_BCD+1,f
  2184  017F  087B               	movf	??_DEC_2_BCD,w
  2185  0180  390F               	andlw	15
  2186  0181  04FC               	iorwf	??_DEC_2_BCD+1,f
  2187  0182  30F0               	movlw	240
  2188  0183  05FB               	andwf	??_DEC_2_BCD,f
  2189  0184  300A               	movlw	10
  2190  0185  00F0               	movwf	___awmod@divisor
  2191  0186  3000               	movlw	0
  2192  0187  00F1               	movwf	___awmod@divisor+1
  2193  0188  087A               	movf	DEC_2_BCD@to_convert+1,w
  2194  0189  00F3               	movwf	___awmod@dividend+1
  2195  018A  0879               	movf	DEC_2_BCD@to_convert,w
  2196  018B  00F2               	movwf	___awmod@dividend
  2197  018C  120A  118A  225A   	fcall	___awmod
  2198  018F  0870               	movf	?___awmod,w
  2199  0190  077B               	addwf	??_DEC_2_BCD,w
  2200  0191  00F9               	movwf	?_DEC_2_BCD
  2201  0192  0871               	movf	?___awmod+1,w
  2202  0193  1803               	skipnc
  2203  0194  0A71               	incf	?___awmod+1,w
  2204  0195  077C               	addwf	??_DEC_2_BCD+1,w
  2205  0196  00FA               	movwf	?_DEC_2_BCD+1
  2206  0197  0008               	return
  2207  0198                     __end_of_DEC_2_BCD:	
  2208                           
  2209                           	psect	text11
  2210  025A                     __ptext11:	
  2211 ;; *************** function ___awmod *****************
  2212 ;; Defined at:
  2213 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  divisor         2    0[COMMON] int 
  2216 ;;  dividend        2    2[COMMON] int 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  sign            1    6[COMMON] unsigned char 
  2219 ;;  counter         1    5[COMMON] unsigned char 
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  2    0[COMMON] int 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2229 ;;      Params:         4       0       0       0       0
  2230 ;;      Locals:         2       0       0       0       0
  2231 ;;      Temps:          1       0       0       0       0
  2232 ;;      Totals:         7       0       0       0       0
  2233 ;;Total ram usage:        7 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; This function calls:
  2236 ;;		Nothing
  2237 ;; This function is called by:
  2238 ;;		_DEC_2_BCD
  2239 ;;		_main
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           
  2244                           ;psect for function ___awmod
  2245  025A                     ___awmod:	
  2246                           
  2247                           ;incstack = 0
  2248                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2249  025A  01F6               	clrf	___awmod@sign
  2250  025B  1FF3               	btfss	___awmod@dividend+1,7
  2251  025C  2A64               	goto	l1175
  2252  025D  09F2               	comf	___awmod@dividend,f
  2253  025E  09F3               	comf	___awmod@dividend+1,f
  2254  025F  0AF2               	incf	___awmod@dividend,f
  2255  0260  1903               	skipnz
  2256  0261  0AF3               	incf	___awmod@dividend+1,f
  2257  0262  01F6               	clrf	___awmod@sign
  2258  0263  0AF6               	incf	___awmod@sign,f
  2259  0264                     l1175:	
  2260  0264  1FF1               	btfss	___awmod@divisor+1,7
  2261  0265  2A6B               	goto	l1179
  2262  0266  09F0               	comf	___awmod@divisor,f
  2263  0267  09F1               	comf	___awmod@divisor+1,f
  2264  0268  0AF0               	incf	___awmod@divisor,f
  2265  0269  1903               	skipnz
  2266  026A  0AF1               	incf	___awmod@divisor+1,f
  2267  026B                     l1179:	
  2268  026B  0870               	movf	___awmod@divisor,w
  2269  026C  0471               	iorwf	___awmod@divisor+1,w
  2270  026D  1903               	btfsc	3,2
  2271  026E  2A98               	goto	l1197
  2272  026F  01F5               	clrf	___awmod@counter
  2273  0270  0AF5               	incf	___awmod@counter,f
  2274  0271                     l1187:	
  2275  0271  1BF1               	btfsc	___awmod@divisor+1,7
  2276  0272  2A7F               	goto	l1189
  2277  0273  3001               	movlw	1
  2278  0274                     u985:	
  2279  0274  1003               	clrc
  2280  0275  0DF0               	rlf	___awmod@divisor,f
  2281  0276  0DF1               	rlf	___awmod@divisor+1,f
  2282  0277  3EFF               	addlw	-1
  2283  0278  1D03               	skipz
  2284  0279  2A74               	goto	u985
  2285  027A  3001               	movlw	1
  2286  027B  00F4               	movwf	??___awmod
  2287  027C  0874               	movf	??___awmod,w
  2288  027D  07F5               	addwf	___awmod@counter,f
  2289  027E  2A71               	goto	l1187
  2290  027F                     l1189:	
  2291  027F  0871               	movf	___awmod@divisor+1,w
  2292  0280  0273               	subwf	___awmod@dividend+1,w
  2293  0281  1D03               	skipz
  2294  0282  2A85               	goto	u1005
  2295  0283  0870               	movf	___awmod@divisor,w
  2296  0284  0272               	subwf	___awmod@dividend,w
  2297  0285                     u1005:	
  2298  0285  1C03               	skipc
  2299  0286  2A8D               	goto	l1193
  2300  0287  0870               	movf	___awmod@divisor,w
  2301  0288  02F2               	subwf	___awmod@dividend,f
  2302  0289  0871               	movf	___awmod@divisor+1,w
  2303  028A  1C03               	skipc
  2304  028B  03F3               	decf	___awmod@dividend+1,f
  2305  028C  02F3               	subwf	___awmod@dividend+1,f
  2306  028D                     l1193:	
  2307  028D  3001               	movlw	1
  2308  028E                     u1015:	
  2309  028E  1003               	clrc
  2310  028F  0CF1               	rrf	___awmod@divisor+1,f
  2311  0290  0CF0               	rrf	___awmod@divisor,f
  2312  0291  3EFF               	addlw	-1
  2313  0292  1D03               	skipz
  2314  0293  2A8E               	goto	u1015
  2315  0294  3001               	movlw	1
  2316  0295  02F5               	subwf	___awmod@counter,f
  2317  0296  1D03               	btfss	3,2
  2318  0297  2A7F               	goto	l1189
  2319  0298                     l1197:	
  2320  0298  0876               	movf	___awmod@sign,w
  2321  0299  1903               	btfsc	3,2
  2322  029A  2AA0               	goto	l1201
  2323  029B  09F2               	comf	___awmod@dividend,f
  2324  029C  09F3               	comf	___awmod@dividend+1,f
  2325  029D  0AF2               	incf	___awmod@dividend,f
  2326  029E  1903               	skipnz
  2327  029F  0AF3               	incf	___awmod@dividend+1,f
  2328  02A0                     l1201:	
  2329  02A0  0873               	movf	___awmod@dividend+1,w
  2330  02A1  00F1               	movwf	?___awmod+1
  2331  02A2  0872               	movf	___awmod@dividend,w
  2332  02A3  00F0               	movwf	?___awmod
  2333  02A4  0008               	return
  2334  02A5                     __end_of___awmod:	
  2335                           
  2336                           	psect	text12
  2337  02F6                     __ptext12:	
  2338 ;; *************** function ___awdiv *****************
  2339 ;; Defined at:
  2340 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;  divisor         2    0[COMMON] int 
  2343 ;;  dividend        2    2[COMMON] int 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  quotient        2    7[COMMON] int 
  2346 ;;  sign            1    6[COMMON] unsigned char 
  2347 ;;  counter         1    5[COMMON] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  2    0[COMMON] int 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2357 ;;      Params:         4       0       0       0       0
  2358 ;;      Locals:         4       0       0       0       0
  2359 ;;      Temps:          1       0       0       0       0
  2360 ;;      Totals:         9       0       0       0       0
  2361 ;;Total ram usage:        9 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; This function calls:
  2364 ;;		Nothing
  2365 ;; This function is called by:
  2366 ;;		_DEC_2_BCD
  2367 ;;		_main
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           
  2372                           ;psect for function ___awdiv
  2373  02F6                     ___awdiv:	
  2374                           
  2375                           ;incstack = 0
  2376                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2377  02F6  01F6               	clrf	___awdiv@sign
  2378  02F7  1FF1               	btfss	___awdiv@divisor+1,7
  2379  02F8  2B00               	goto	l1131
  2380  02F9  09F0               	comf	___awdiv@divisor,f
  2381  02FA  09F1               	comf	___awdiv@divisor+1,f
  2382  02FB  0AF0               	incf	___awdiv@divisor,f
  2383  02FC  1903               	skipnz
  2384  02FD  0AF1               	incf	___awdiv@divisor+1,f
  2385  02FE  01F6               	clrf	___awdiv@sign
  2386  02FF  0AF6               	incf	___awdiv@sign,f
  2387  0300                     l1131:	
  2388  0300  1FF3               	btfss	___awdiv@dividend+1,7
  2389  0301  2B0B               	goto	l1137
  2390  0302  09F2               	comf	___awdiv@dividend,f
  2391  0303  09F3               	comf	___awdiv@dividend+1,f
  2392  0304  0AF2               	incf	___awdiv@dividend,f
  2393  0305  1903               	skipnz
  2394  0306  0AF3               	incf	___awdiv@dividend+1,f
  2395  0307  3001               	movlw	1
  2396  0308  00F4               	movwf	??___awdiv
  2397  0309  0874               	movf	??___awdiv,w
  2398  030A  06F6               	xorwf	___awdiv@sign,f
  2399  030B                     l1137:	
  2400  030B  01F7               	clrf	___awdiv@quotient
  2401  030C  01F8               	clrf	___awdiv@quotient+1
  2402  030D  0870               	movf	___awdiv@divisor,w
  2403  030E  0471               	iorwf	___awdiv@divisor+1,w
  2404  030F  1903               	btfsc	3,2
  2405  0310  2B42               	goto	l1159
  2406  0311  01F5               	clrf	___awdiv@counter
  2407  0312  0AF5               	incf	___awdiv@counter,f
  2408  0313                     l1147:	
  2409  0313  1BF1               	btfsc	___awdiv@divisor+1,7
  2410  0314  2B21               	goto	l1149
  2411  0315  3001               	movlw	1
  2412  0316                     u885:	
  2413  0316  1003               	clrc
  2414  0317  0DF0               	rlf	___awdiv@divisor,f
  2415  0318  0DF1               	rlf	___awdiv@divisor+1,f
  2416  0319  3EFF               	addlw	-1
  2417  031A  1D03               	skipz
  2418  031B  2B16               	goto	u885
  2419  031C  3001               	movlw	1
  2420  031D  00F4               	movwf	??___awdiv
  2421  031E  0874               	movf	??___awdiv,w
  2422  031F  07F5               	addwf	___awdiv@counter,f
  2423  0320  2B13               	goto	l1147
  2424  0321                     l1149:	
  2425  0321  3001               	movlw	1
  2426  0322                     u905:	
  2427  0322  1003               	clrc
  2428  0323  0DF7               	rlf	___awdiv@quotient,f
  2429  0324  0DF8               	rlf	___awdiv@quotient+1,f
  2430  0325  3EFF               	addlw	-1
  2431  0326  1D03               	skipz
  2432  0327  2B22               	goto	u905
  2433  0328  0871               	movf	___awdiv@divisor+1,w
  2434  0329  0273               	subwf	___awdiv@dividend+1,w
  2435  032A  1D03               	skipz
  2436  032B  2B2E               	goto	u915
  2437  032C  0870               	movf	___awdiv@divisor,w
  2438  032D  0272               	subwf	___awdiv@dividend,w
  2439  032E                     u915:	
  2440  032E  1C03               	skipc
  2441  032F  2B37               	goto	l1155
  2442  0330  0870               	movf	___awdiv@divisor,w
  2443  0331  02F2               	subwf	___awdiv@dividend,f
  2444  0332  0871               	movf	___awdiv@divisor+1,w
  2445  0333  1C03               	skipc
  2446  0334  03F3               	decf	___awdiv@dividend+1,f
  2447  0335  02F3               	subwf	___awdiv@dividend+1,f
  2448  0336  1477               	bsf	___awdiv@quotient,0
  2449  0337                     l1155:	
  2450  0337  3001               	movlw	1
  2451  0338                     u925:	
  2452  0338  1003               	clrc
  2453  0339  0CF1               	rrf	___awdiv@divisor+1,f
  2454  033A  0CF0               	rrf	___awdiv@divisor,f
  2455  033B  3EFF               	addlw	-1
  2456  033C  1D03               	skipz
  2457  033D  2B38               	goto	u925
  2458  033E  3001               	movlw	1
  2459  033F  02F5               	subwf	___awdiv@counter,f
  2460  0340  1D03               	btfss	3,2
  2461  0341  2B21               	goto	l1149
  2462  0342                     l1159:	
  2463  0342  0876               	movf	___awdiv@sign,w
  2464  0343  1903               	btfsc	3,2
  2465  0344  2B4A               	goto	l1163
  2466  0345  09F7               	comf	___awdiv@quotient,f
  2467  0346  09F8               	comf	___awdiv@quotient+1,f
  2468  0347  0AF7               	incf	___awdiv@quotient,f
  2469  0348  1903               	skipnz
  2470  0349  0AF8               	incf	___awdiv@quotient+1,f
  2471  034A                     l1163:	
  2472  034A  0878               	movf	___awdiv@quotient+1,w
  2473  034B  00F1               	movwf	?___awdiv+1
  2474  034C  0877               	movf	___awdiv@quotient,w
  2475  034D  00F0               	movwf	?___awdiv
  2476  034E  0008               	return
  2477  034F                     __end_of___awdiv:	
  2478                           
  2479                           	psect	text13
  2480  03AF                     __ptext13:	
  2481 ;; *************** function _Lcd_Start *****************
  2482 ;; Defined at:
  2483 ;;		line 75 in file "lcd.h"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;		None
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;  i               2    6[COMMON] int 
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2497 ;;      Params:         0       0       0       0       0
  2498 ;;      Locals:         2       0       0       0       0
  2499 ;;      Temps:          2       0       0       0       0
  2500 ;;      Totals:         4       0       0       0       0
  2501 ;;Total ram usage:        4 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    2
  2504 ;; This function calls:
  2505 ;;		_Lcd_Cmd
  2506 ;;		_Lcd_SetBit
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _Lcd_Start
  2514  03AF                     _Lcd_Start:	
  2515                           
  2516                           ;lcd.h: 77: Lcd_SetBit(0x00);
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _Lcd_Start: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2520  03AF  3000               	movlw	0
  2521  03B0  120A  118A  20A4  120A  118A  	fcall	_Lcd_SetBit
  2522                           
  2523                           ;lcd.h: 78: for(int i=1065244; i<=0; i--) __nop();
  2524  03B5  301C               	movlw	28
  2525  03B6  00F6               	movwf	Lcd_Start@i
  2526  03B7  3041               	movlw	65
  2527  03B8  00F7               	movwf	Lcd_Start@i+1
  2528  03B9  0877               	movf	Lcd_Start@i+1,w
  2529  03BA  3A80               	xorlw	128
  2530  03BB  00FF               	movwf	127
  2531  03BC  3080               	movlw	128
  2532  03BD  027F               	subwf	127,w
  2533  03BE  1D03               	skipz
  2534  03BF  2BC2               	goto	u1235
  2535  03C0  3001               	movlw	1
  2536  03C1  0276               	subwf	Lcd_Start@i,w
  2537  03C2                     u1235:	
  2538  03C2  1803               	btfsc	3,0
  2539  03C3  2BD6               	goto	l1343
  2540  03C4                     l114:	
  2541  03C4  0000               	nop
  2542  03C5  30FF               	movlw	255
  2543  03C6  07F6               	addwf	Lcd_Start@i,f
  2544  03C7  1803               	skipnc
  2545  03C8  0AF7               	incf	Lcd_Start@i+1,f
  2546  03C9  30FF               	movlw	255
  2547  03CA  07F7               	addwf	Lcd_Start@i+1,f
  2548  03CB  0877               	movf	Lcd_Start@i+1,w
  2549  03CC  3A80               	xorlw	128
  2550  03CD  00FF               	movwf	127
  2551  03CE  3080               	movlw	128
  2552  03CF  027F               	subwf	127,w
  2553  03D0  1D03               	skipz
  2554  03D1  2BD4               	goto	u1245
  2555  03D2  3001               	movlw	1
  2556  03D3  0276               	subwf	Lcd_Start@i,w
  2557  03D4                     u1245:	
  2558  03D4  1C03               	skipc
  2559  03D5  2BC4               	goto	l114
  2560  03D6                     l1343:	
  2561                           
  2562                           ;lcd.h: 79: Lcd_Cmd(0x03);
  2563  03D6  3003               	movlw	3
  2564  03D7  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2565                           
  2566                           ;lcd.h: 80: _delay((unsigned long)((5)*(20000000/4000.0)));
  2567  03DC  3021               	movlw	33
  2568  03DD  00F5               	movwf	??_Lcd_Start+1
  2569  03DE  3076               	movlw	118
  2570  03DF  00F4               	movwf	??_Lcd_Start
  2571  03E0                     u1547:	
  2572  03E0  0BF4               	decfsz	??_Lcd_Start,f
  2573  03E1  2BE0               	goto	u1547
  2574  03E2  0BF5               	decfsz	??_Lcd_Start+1,f
  2575  03E3  2BE0               	goto	u1547
  2576  03E4  0000               	nop
  2577                           
  2578                           ;lcd.h: 81: Lcd_Cmd(0x03);
  2579  03E5  3003               	movlw	3
  2580  03E6  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2581                           
  2582                           ;lcd.h: 82: _delay((unsigned long)((11)*(20000000/4000.0)));
  2583  03EB  3048               	movlw	72
  2584  03EC  00F5               	movwf	??_Lcd_Start+1
  2585  03ED  306C               	movlw	108
  2586  03EE  00F4               	movwf	??_Lcd_Start
  2587  03EF                     u1557:	
  2588  03EF  0BF4               	decfsz	??_Lcd_Start,f
  2589  03F0  2BEF               	goto	u1557
  2590  03F1  0BF5               	decfsz	??_Lcd_Start+1,f
  2591  03F2  2BEF               	goto	u1557
  2592  03F3  0000               	nop
  2593                           
  2594                           ;lcd.h: 83: Lcd_Cmd(0x03);
  2595  03F4  3003               	movlw	3
  2596  03F5  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2597                           
  2598                           ;lcd.h: 84: Lcd_Cmd(0x02);
  2599  03FA  3002               	movlw	2
  2600  03FB  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2601                           
  2602                           ;lcd.h: 85: Lcd_Cmd(0x02);
  2603  0400  3002               	movlw	2
  2604  0401  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2605                           
  2606                           ;lcd.h: 86: Lcd_Cmd(0x08);
  2607  0406  3008               	movlw	8
  2608  0407  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2609                           
  2610                           ;lcd.h: 87: Lcd_Cmd(0x00);
  2611  040C  3000               	movlw	0
  2612  040D  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2613                           
  2614                           ;lcd.h: 88: Lcd_Cmd(0x0C);
  2615  0412  300C               	movlw	12
  2616  0413  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2617                           
  2618                           ;lcd.h: 89: Lcd_Cmd(0x00);
  2619  0418  3000               	movlw	0
  2620  0419  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2621                           
  2622                           ;lcd.h: 90: Lcd_Cmd(0x06);
  2623  041E  3006               	movlw	6
  2624  041F  120A  118A  20BE   	fcall	_Lcd_Cmd
  2625  0422  0008               	return
  2626  0423                     __end_of_Lcd_Start:	
  2627                           
  2628                           	psect	text14
  2629  0210                     __ptext14:	
  2630 ;; *************** function _Lcd_Set_Cursor *****************
  2631 ;; Defined at:
  2632 ;;		line 54 in file "lcd.h"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  a               1    wreg     unsigned char 
  2635 ;;  b               1    4[COMMON] unsigned char 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  a               1    7[COMMON] unsigned char 
  2638 ;;  temp            1   10[COMMON] unsigned char 
  2639 ;;  y               1    9[COMMON] unsigned char 
  2640 ;;  z               1    8[COMMON] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0, pclath, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2650 ;;      Params:         1       0       0       0       0
  2651 ;;      Locals:         4       0       0       0       0
  2652 ;;      Temps:          2       0       0       0       0
  2653 ;;      Totals:         7       0       0       0       0
  2654 ;;Total ram usage:        7 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    2
  2657 ;; This function calls:
  2658 ;;		_Lcd_Cmd
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _Lcd_Set_Cursor
  2666  0210                     _Lcd_Set_Cursor:	
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2670                           ;Lcd_Set_Cursor@a stored from wreg
  2671  0210  00F7               	movwf	Lcd_Set_Cursor@a
  2672                           
  2673                           ;lcd.h: 56: char temp,z,y;
  2674                           ;lcd.h: 57: if(a== 1)
  2675  0211  0377               	decf	Lcd_Set_Cursor@a,w
  2676  0212  1D03               	btfss	3,2
  2677  0213  2A35               	goto	l1321
  2678                           
  2679                           ;lcd.h: 58: {
  2680                           ;lcd.h: 59: temp = 0x80 + b - 1;
  2681  0214  0874               	movf	Lcd_Set_Cursor@b,w
  2682  0215  3E7F               	addlw	127
  2683  0216  00F5               	movwf	??_Lcd_Set_Cursor
  2684  0217  0875               	movf	??_Lcd_Set_Cursor,w
  2685  0218  00FA               	movwf	Lcd_Set_Cursor@temp
  2686                           
  2687                           ;lcd.h: 60: z = temp>>4;
  2688  0219  087A               	movf	Lcd_Set_Cursor@temp,w
  2689  021A  00F5               	movwf	??_Lcd_Set_Cursor
  2690  021B  3004               	movlw	4
  2691  021C                     u1205:	
  2692  021C  1003               	clrc
  2693  021D  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2694  021E  3EFF               	addlw	-1
  2695  021F  1D03               	skipz
  2696  0220  2A1C               	goto	u1205
  2697  0221  0875               	movf	??_Lcd_Set_Cursor,w
  2698  0222  00F6               	movwf	??_Lcd_Set_Cursor+1
  2699  0223  0876               	movf	??_Lcd_Set_Cursor+1,w
  2700  0224  00F8               	movwf	Lcd_Set_Cursor@z
  2701                           
  2702                           ;lcd.h: 61: y = temp & 0x0F;
  2703  0225  087A               	movf	Lcd_Set_Cursor@temp,w
  2704  0226  390F               	andlw	15
  2705  0227  00F5               	movwf	??_Lcd_Set_Cursor
  2706  0228  0875               	movf	??_Lcd_Set_Cursor,w
  2707  0229  00F9               	movwf	Lcd_Set_Cursor@y
  2708                           
  2709                           ;lcd.h: 62: Lcd_Cmd(z);
  2710  022A  0878               	movf	Lcd_Set_Cursor@z,w
  2711  022B  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2712                           
  2713                           ;lcd.h: 63: Lcd_Cmd(y);
  2714  0230  0879               	movf	Lcd_Set_Cursor@y,w
  2715  0231  120A  118A  20BE   	fcall	_Lcd_Cmd
  2716                           
  2717                           ;lcd.h: 64: }
  2718  0234  0008               	return
  2719  0235                     l1321:	
  2720                           
  2721                           ;lcd.h: 65: else if(a== 2)
  2722  0235  3002               	movlw	2
  2723  0236  0677               	xorwf	Lcd_Set_Cursor@a,w
  2724  0237  1D03               	btfss	3,2
  2725  0238  0008               	return
  2726                           
  2727                           ;lcd.h: 66: {
  2728                           ;lcd.h: 67: temp = 0xC0 + b - 1;
  2729  0239  0874               	movf	Lcd_Set_Cursor@b,w
  2730  023A  3EBF               	addlw	191
  2731  023B  00F5               	movwf	??_Lcd_Set_Cursor
  2732  023C  0875               	movf	??_Lcd_Set_Cursor,w
  2733  023D  00FA               	movwf	Lcd_Set_Cursor@temp
  2734                           
  2735                           ;lcd.h: 68: z = temp>>4;
  2736  023E  087A               	movf	Lcd_Set_Cursor@temp,w
  2737  023F  00F5               	movwf	??_Lcd_Set_Cursor
  2738  0240  3004               	movlw	4
  2739  0241                     u1225:	
  2740  0241  1003               	clrc
  2741  0242  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2742  0243  3EFF               	addlw	-1
  2743  0244  1D03               	skipz
  2744  0245  2A41               	goto	u1225
  2745  0246  0875               	movf	??_Lcd_Set_Cursor,w
  2746  0247  00F6               	movwf	??_Lcd_Set_Cursor+1
  2747  0248  0876               	movf	??_Lcd_Set_Cursor+1,w
  2748  0249  00F8               	movwf	Lcd_Set_Cursor@z
  2749                           
  2750                           ;lcd.h: 69: y = temp & 0x0F;
  2751  024A  087A               	movf	Lcd_Set_Cursor@temp,w
  2752  024B  390F               	andlw	15
  2753  024C  00F5               	movwf	??_Lcd_Set_Cursor
  2754  024D  0875               	movf	??_Lcd_Set_Cursor,w
  2755  024E  00F9               	movwf	Lcd_Set_Cursor@y
  2756                           
  2757                           ;lcd.h: 70: Lcd_Cmd(z);
  2758  024F  0878               	movf	Lcd_Set_Cursor@z,w
  2759  0250  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  2760                           
  2761                           ;lcd.h: 71: Lcd_Cmd(y);
  2762  0255  0879               	movf	Lcd_Set_Cursor@y,w
  2763  0256  120A  118A  20BE   	fcall	_Lcd_Cmd
  2764  0259  0008               	return
  2765  025A                     __end_of_Lcd_Set_Cursor:	
  2766                           
  2767                           	psect	text15
  2768  00F9                     __ptext15:	
  2769 ;; *************** function _Lcd_Print_String *****************
  2770 ;; Defined at:
  2771 ;;		line 109 in file "lcd.h"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;  a               1    wreg     PTR unsigned char 
  2774 ;;		 -> STR_4(8), STR_3(7), STR_2(17), STR_1(12), 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  a               1    7[COMMON] PTR unsigned char 
  2777 ;;		 -> STR_4(8), STR_3(7), STR_2(17), STR_1(12), 
  2778 ;;  i               2    5[COMMON] int 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2788 ;;      Params:         0       0       0       0       0
  2789 ;;      Locals:         3       0       0       0       0
  2790 ;;      Temps:          0       0       0       0       0
  2791 ;;      Totals:         3       0       0       0       0
  2792 ;;Total ram usage:        3 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    2
  2795 ;; This function calls:
  2796 ;;		_Lcd_Print_Char
  2797 ;; This function is called by:
  2798 ;;		_main
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           
  2803                           ;psect for function _Lcd_Print_String
  2804  00F9                     _Lcd_Print_String:	
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _Lcd_Print_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2808                           ;Lcd_Print_String@a stored from wreg
  2809  00F9  00F7               	movwf	Lcd_Print_String@a
  2810                           
  2811                           ;lcd.h: 111: int i;
  2812                           ;lcd.h: 112: for(i=0;a[i]!='\0';i++)
  2813  00FA  01F5               	clrf	Lcd_Print_String@i
  2814  00FB  01F6               	clrf	Lcd_Print_String@i+1
  2815  00FC                     l1371:	
  2816  00FC  0875               	movf	Lcd_Print_String@i,w
  2817  00FD  0777               	addwf	Lcd_Print_String@a,w
  2818  00FE  0084               	movwf	4
  2819  00FF  120A  118A  2003  120A  118A  	fcall	stringdir
  2820  0104  3A00               	xorlw	0
  2821  0105  1903               	btfsc	3,2
  2822  0106  0008               	return
  2823                           
  2824                           ;lcd.h: 113: Lcd_Print_Char(a[i]);
  2825  0107  0875               	movf	Lcd_Print_String@i,w
  2826  0108  0777               	addwf	Lcd_Print_String@a,w
  2827  0109  0084               	movwf	4
  2828  010A  120A  118A  2003  120A  118A  	fcall	stringdir
  2829  010F  120A  118A  2198  120A  118A  	fcall	_Lcd_Print_Char
  2830  0114  3001               	movlw	1
  2831  0115  07F5               	addwf	Lcd_Print_String@i,f
  2832  0116  1803               	skipnc
  2833  0117  0AF6               	incf	Lcd_Print_String@i+1,f
  2834  0118  3000               	movlw	0
  2835  0119  07F6               	addwf	Lcd_Print_String@i+1,f
  2836  011A  28FC               	goto	l1371
  2837  011B                     __end_of_Lcd_Print_String:	
  2838                           
  2839                           	psect	text16
  2840  0198                     __ptext16:	
  2841 ;; *************** function _Lcd_Print_Char *****************
  2842 ;; Defined at:
  2843 ;;		line 93 in file "lcd.h"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  data            1    wreg     unsigned char 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  data            1    4[COMMON] unsigned char 
  2848 ;;  Upper_Nibble    1    3[COMMON] unsigned char 
  2849 ;;  Lower_Nibble    1    2[COMMON] unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0, pclath, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2859 ;;      Params:         0       0       0       0       0
  2860 ;;      Locals:         3       0       0       0       0
  2861 ;;      Temps:          1       0       0       0       0
  2862 ;;      Totals:         4       0       0       0       0
  2863 ;;Total ram usage:        4 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    1
  2866 ;; This function calls:
  2867 ;;		_Lcd_SetBit
  2868 ;; This function is called by:
  2869 ;;		_Lcd_Print_String
  2870 ;;		_main
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           
  2875                           ;psect for function _Lcd_Print_Char
  2876  0198                     _Lcd_Print_Char:	
  2877                           
  2878                           ;incstack = 0
  2879                           ; Regs used in _Lcd_Print_Char: [wreg+status,2+status,0+pclath+cstack]
  2880                           ;Lcd_Print_Char@data stored from wreg
  2881  0198  00F4               	movwf	Lcd_Print_Char@data
  2882                           
  2883                           ;lcd.h: 95: char Lower_Nibble,Upper_Nibble;
  2884                           ;lcd.h: 96: Lower_Nibble = data&0x0F;
  2885  0199  0874               	movf	Lcd_Print_Char@data,w
  2886  019A  390F               	andlw	15
  2887  019B  00F1               	movwf	??_Lcd_Print_Char
  2888  019C  0871               	movf	??_Lcd_Print_Char,w
  2889  019D  00F2               	movwf	Lcd_Print_Char@Lower_Nibble
  2890                           
  2891                           ;lcd.h: 97: Upper_Nibble = data&0xF0;
  2892  019E  0874               	movf	Lcd_Print_Char@data,w
  2893  019F  39F0               	andlw	240
  2894  01A0  00F1               	movwf	??_Lcd_Print_Char
  2895  01A1  0871               	movf	??_Lcd_Print_Char,w
  2896  01A2  00F3               	movwf	Lcd_Print_Char@Upper_Nibble
  2897                           
  2898                           ;lcd.h: 98: RD2 = 1;
  2899  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  2900  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  2901  01A5  1508               	bsf	8,2	;volatile
  2902                           
  2903                           ;lcd.h: 99: Lcd_SetBit(Upper_Nibble>>4);
  2904  01A6  0873               	movf	Lcd_Print_Char@Upper_Nibble,w
  2905  01A7  00F1               	movwf	??_Lcd_Print_Char
  2906  01A8  3004               	movlw	4
  2907  01A9                     u1045:	
  2908  01A9  1003               	clrc
  2909  01AA  0CF1               	rrf	??_Lcd_Print_Char,f
  2910  01AB  3EFF               	addlw	-1
  2911  01AC  1D03               	skipz
  2912  01AD  29A9               	goto	u1045
  2913  01AE  0871               	movf	??_Lcd_Print_Char,w
  2914  01AF  120A  118A  20A4  120A  118A  	fcall	_Lcd_SetBit
  2915                           
  2916                           ;lcd.h: 100: RD3 = 1;
  2917  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  2918  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  2919  01B6  1588               	bsf	8,3	;volatile
  2920                           
  2921                           ;lcd.h: 101: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2922  01B7  3042               	movlw	66
  2923  01B8  00F1               	movwf	??_Lcd_Print_Char
  2924  01B9                     u1567:	
  2925  01B9  0BF1               	decfsz	??_Lcd_Print_Char,f
  2926  01BA  29B9               	goto	u1567
  2927  01BB  0000               	nop
  2928                           
  2929                           ;lcd.h: 102: RD3 = 0;
  2930  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  2931  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  2932  01BE  1188               	bcf	8,3	;volatile
  2933                           
  2934                           ;lcd.h: 103: Lcd_SetBit(Lower_Nibble);
  2935  01BF  0872               	movf	Lcd_Print_Char@Lower_Nibble,w
  2936  01C0  120A  118A  20A4  120A  118A  	fcall	_Lcd_SetBit
  2937                           
  2938                           ;lcd.h: 104: RD3 = 1;
  2939  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  2940  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  2941  01C7  1588               	bsf	8,3	;volatile
  2942                           
  2943                           ;lcd.h: 105: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2944  01C8  3042               	movlw	66
  2945  01C9  00F1               	movwf	??_Lcd_Print_Char
  2946  01CA                     u1577:	
  2947  01CA  0BF1               	decfsz	??_Lcd_Print_Char,f
  2948  01CB  29CA               	goto	u1577
  2949  01CC  0000               	nop
  2950                           
  2951                           ;lcd.h: 106: RD3 = 0;
  2952  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  2953  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  2954  01CF  1188               	bcf	8,3	;volatile
  2955  01D0  0008               	return
  2956  01D1                     __end_of_Lcd_Print_Char:	
  2957                           
  2958                           	psect	text17
  2959  007D                     __ptext17:	
  2960 ;; *************** function _Lcd_Clear *****************
  2961 ;; Defined at:
  2962 ;;		line 48 in file "lcd.h"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  2  104[None  ] int 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0, pclath, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2976 ;;      Params:         0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0
  2979 ;;      Totals:         0       0       0       0       0
  2980 ;;Total ram usage:        0 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    2
  2983 ;; This function calls:
  2984 ;;		_Lcd_Cmd
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function _Lcd_Clear
  2992  007D                     _Lcd_Clear:	
  2993                           
  2994                           ;lcd.h: 50: Lcd_Cmd(0);
  2995                           
  2996                           ;incstack = 0
  2997                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2998  007D  3000               	movlw	0
  2999  007E  120A  118A  20BE  120A  118A  	fcall	_Lcd_Cmd
  3000                           
  3001                           ;lcd.h: 51: Lcd_Cmd(1);
  3002  0083  3001               	movlw	1
  3003  0084  120A  118A  20BE   	fcall	_Lcd_Cmd
  3004  0087  0008               	return
  3005  0088                     __end_of_Lcd_Clear:	
  3006                           
  3007                           	psect	text18
  3008  00BE                     __ptext18:	
  3009 ;; *************** function _Lcd_Cmd *****************
  3010 ;; Defined at:
  3011 ;;		line 39 in file "lcd.h"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  a               1    wreg     unsigned char 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  a               1    3[COMMON] unsigned char 
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      void 
  3018 ;; Registers used:
  3019 ;;		wreg, status,2, status,0, pclath, cstack
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3025 ;;      Params:         0       0       0       0       0
  3026 ;;      Locals:         1       0       0       0       0
  3027 ;;      Temps:          2       0       0       0       0
  3028 ;;      Totals:         3       0       0       0       0
  3029 ;;Total ram usage:        3 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; Hardware stack levels required when called:    1
  3032 ;; This function calls:
  3033 ;;		_Lcd_SetBit
  3034 ;; This function is called by:
  3035 ;;		_Lcd_Clear
  3036 ;;		_Lcd_Set_Cursor
  3037 ;;		_Lcd_Start
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           
  3042                           ;psect for function _Lcd_Cmd
  3043  00BE                     _Lcd_Cmd:	
  3044                           
  3045                           ;incstack = 0
  3046                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3047                           ;Lcd_Cmd@a stored from wreg
  3048  00BE  00F3               	movwf	Lcd_Cmd@a
  3049                           
  3050                           ;lcd.h: 41: RD2 = 0;
  3051  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  3052  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  3053  00C1  1108               	bcf	8,2	;volatile
  3054                           
  3055                           ;lcd.h: 42: Lcd_SetBit(a);
  3056  00C2  0873               	movf	Lcd_Cmd@a,w
  3057  00C3  120A  118A  20A4  120A  118A  	fcall	_Lcd_SetBit
  3058                           
  3059                           ;lcd.h: 43: RD3 = 1;
  3060  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  3061  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  3062  00CA  1588               	bsf	8,3	;volatile
  3063                           
  3064                           ;lcd.h: 44: _delay((unsigned long)((4)*(20000000/4000.0)));
  3065  00CB  301A               	movlw	26
  3066  00CC  00F2               	movwf	??_Lcd_Cmd+1
  3067  00CD  30F8               	movlw	248
  3068  00CE  00F1               	movwf	??_Lcd_Cmd
  3069  00CF                     u1587:	
  3070  00CF  0BF1               	decfsz	??_Lcd_Cmd,f
  3071  00D0  28CF               	goto	u1587
  3072  00D1  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3073  00D2  28CF               	goto	u1587
  3074  00D3  0000               	nop
  3075                           
  3076                           ;lcd.h: 45: RD3 = 0;
  3077  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  3078  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  3079  00D6  1188               	bcf	8,3	;volatile
  3080  00D7  0008               	return
  3081  00D8                     __end_of_Lcd_Cmd:	
  3082                           
  3083                           	psect	text19
  3084  00A4                     __ptext19:	
  3085 ;; *************** function _Lcd_SetBit *****************
  3086 ;; Defined at:
  3087 ;;		line 16 in file "lcd.h"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  data_bit        1    wreg     unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  data_bit        1    0[COMMON] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3101 ;;      Params:         0       0       0       0       0
  3102 ;;      Locals:         1       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0
  3104 ;;      Totals:         1       0       0       0       0
  3105 ;;Total ram usage:        1 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_Lcd_Cmd
  3111 ;;		_Lcd_Start
  3112 ;;		_Lcd_Print_Char
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function _Lcd_SetBit
  3118  00A4                     _Lcd_SetBit:	
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in _Lcd_SetBit: [wreg]
  3122                           ;Lcd_SetBit@data_bit stored from wreg
  3123  00A4  00F0               	movwf	Lcd_SetBit@data_bit
  3124                           
  3125                           ;lcd.h: 18: if(data_bit& 1)
  3126  00A5  1C70               	btfss	Lcd_SetBit@data_bit,0
  3127  00A6  28AB               	goto	l91
  3128                           
  3129                           ;lcd.h: 19: RD4 = 1;
  3130  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  3131  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  3132  00A9  1608               	bsf	8,4	;volatile
  3133  00AA  28AE               	goto	l92
  3134  00AB                     l91:	
  3135                           
  3136                           ;lcd.h: 20: else
  3137                           ;lcd.h: 21: RD4 = 0;
  3138  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  3139  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  3140  00AD  1208               	bcf	8,4	;volatile
  3141  00AE                     l92:	
  3142                           
  3143                           ;lcd.h: 23: if(data_bit& 2)
  3144  00AE  1CF0               	btfss	Lcd_SetBit@data_bit,1
  3145  00AF  28B2               	goto	l93
  3146                           
  3147                           ;lcd.h: 24: RD5 = 1;
  3148  00B0  1688               	bsf	8,5	;volatile
  3149  00B1  28B3               	goto	l94
  3150  00B2                     l93:	
  3151                           
  3152                           ;lcd.h: 25: else
  3153                           ;lcd.h: 26: RD5 = 0;
  3154  00B2  1288               	bcf	8,5	;volatile
  3155  00B3                     l94:	
  3156                           
  3157                           ;lcd.h: 28: if(data_bit& 4)
  3158  00B3  1D70               	btfss	Lcd_SetBit@data_bit,2
  3159  00B4  28B7               	goto	l95
  3160                           
  3161                           ;lcd.h: 29: RD6 = 1;
  3162  00B5  1708               	bsf	8,6	;volatile
  3163  00B6  28B8               	goto	l96
  3164  00B7                     l95:	
  3165                           
  3166                           ;lcd.h: 30: else
  3167                           ;lcd.h: 31: RD6 = 0;
  3168  00B7  1308               	bcf	8,6	;volatile
  3169  00B8                     l96:	
  3170                           
  3171                           ;lcd.h: 33: if(data_bit& 8)
  3172  00B8  1DF0               	btfss	Lcd_SetBit@data_bit,3
  3173  00B9  28BC               	goto	l97
  3174                           
  3175                           ;lcd.h: 34: RD7 = 1;
  3176  00BA  1788               	bsf	8,7	;volatile
  3177  00BB  0008               	return
  3178  00BC                     l97:	
  3179                           
  3180                           ;lcd.h: 35: else
  3181                           ;lcd.h: 36: RD7 = 0;
  3182  00BC  1388               	bcf	8,7	;volatile
  3183  00BD  0008               	return
  3184  00BE                     __end_of_Lcd_SetBit:	
  3185                           
  3186                           	psect	text20
  3187  02A5                     __ptext20:	
  3188 ;; *************** function _I2C_Initialize *****************
  3189 ;; Defined at:
  3190 ;;		line 10 in file "PIC16F877a_I2C.h"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  feq_K           4   13[BANK0 ] const unsigned long 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, status,2, status,0, pclath, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3204 ;;      Params:         0       4       0       0       0
  3205 ;;      Locals:         0       0       0       0       0
  3206 ;;      Temps:          0       4       0       0       0
  3207 ;;      Totals:         0       8       0       0       0
  3208 ;;Total ram usage:        8 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    1
  3211 ;; This function calls:
  3212 ;;		___lldiv
  3213 ;;		___lmul
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _I2C_Initialize
  3221  02A5                     _I2C_Initialize:	
  3222                           
  3223                           ;PIC16F877a_I2C.h: 12: TRISC3 = 1; TRISC4 = 1;
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _I2C_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3227  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  3228  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  3229  02A7  1587               	bsf	7,3	;volatile
  3230  02A8  1607               	bsf	7,4	;volatile
  3231                           
  3232                           ;PIC16F877a_I2C.h: 14: SSPCON = 0b00101000;
  3233  02A9  3028               	movlw	40
  3234  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  3235  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  3236  02AC  0094               	movwf	20	;volatile
  3237                           
  3238                           ;PIC16F877a_I2C.h: 15: SSPCON2 = 0b00000000;
  3239  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  3240  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  3241  02AF  0191               	clrf	17	;volatile
  3242                           
  3243                           ;PIC16F877a_I2C.h: 17: SSPADD = (20000000/(4*feq_K*100))-1;
  3244  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  3245  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  3246  02B2  082D               	movf	I2C_Initialize@feq_K,w
  3247  02B3  00B1               	movwf	??_I2C_Initialize
  3248  02B4  082E               	movf	I2C_Initialize@feq_K+1,w
  3249  02B5  00B2               	movwf	??_I2C_Initialize+1
  3250  02B6  082F               	movf	I2C_Initialize@feq_K+2,w
  3251  02B7  00B3               	movwf	??_I2C_Initialize+2
  3252  02B8  0830               	movf	I2C_Initialize@feq_K+3,w
  3253  02B9  00B4               	movwf	??_I2C_Initialize+3
  3254  02BA  3002               	movlw	2
  3255  02BB                     u1265:	
  3256  02BB  1003               	clrc
  3257  02BC  0DB1               	rlf	??_I2C_Initialize,f
  3258  02BD  0DB2               	rlf	??_I2C_Initialize+1,f
  3259  02BE  0DB3               	rlf	??_I2C_Initialize+2,f
  3260  02BF  0DB4               	rlf	??_I2C_Initialize+3,f
  3261  02C0  3EFF               	addlw	-1
  3262  02C1  1D03               	skipz
  3263  02C2  2ABB               	goto	u1265
  3264  02C3  0834               	movf	??_I2C_Initialize+3,w
  3265  02C4  00F3               	movwf	___lmul@multiplier+3
  3266  02C5  0833               	movf	??_I2C_Initialize+2,w
  3267  02C6  00F2               	movwf	___lmul@multiplier+2
  3268  02C7  0832               	movf	??_I2C_Initialize+1,w
  3269  02C8  00F1               	movwf	___lmul@multiplier+1
  3270  02C9  0831               	movf	??_I2C_Initialize,w
  3271  02CA  00F0               	movwf	___lmul@multiplier
  3272  02CB  3000               	movlw	0
  3273  02CC  00F7               	movwf	___lmul@multiplicand+3
  3274  02CD  3000               	movlw	0
  3275  02CE  00F6               	movwf	___lmul@multiplicand+2
  3276  02CF  3000               	movlw	0
  3277  02D0  00F5               	movwf	___lmul@multiplicand+1
  3278  02D1  3064               	movlw	100
  3279  02D2  00F4               	movwf	___lmul@multiplicand
  3280  02D3  120A  118A  21D1  120A  118A  	fcall	___lmul
  3281  02D8  0873               	movf	?___lmul+3,w
  3282  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  3283  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  3284  02DB  00A3               	movwf	___lldiv@divisor+3
  3285  02DC  0872               	movf	?___lmul+2,w
  3286  02DD  00A2               	movwf	___lldiv@divisor+2
  3287  02DE  0871               	movf	?___lmul+1,w
  3288  02DF  00A1               	movwf	___lldiv@divisor+1
  3289  02E0  0870               	movf	?___lmul,w
  3290  02E1  00A0               	movwf	___lldiv@divisor
  3291  02E2  3001               	movlw	1
  3292  02E3  00A7               	movwf	___lldiv@dividend+3
  3293  02E4  3031               	movlw	49
  3294  02E5  00A6               	movwf	___lldiv@dividend+2
  3295  02E6  302D               	movlw	45
  3296  02E7  00A5               	movwf	___lldiv@dividend+1
  3297  02E8  3000               	movlw	0
  3298  02E9  00A4               	movwf	___lldiv@dividend
  3299  02EA  120A  118A  234F   	fcall	___lldiv
  3300  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  3301  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  3302  02EF  0820               	movf	?___lldiv,w
  3303  02F0  3EFF               	addlw	255
  3304  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  3305  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  3306  02F3  0093               	movwf	19	;volatile
  3307                           
  3308                           ;PIC16F877a_I2C.h: 18: SSPSTAT = 0b00000000;
  3309  02F4  0194               	clrf	20	;volatile
  3310  02F5  0008               	return
  3311  02F6                     __end_of_I2C_Initialize:	
  3312                           
  3313                           	psect	text21
  3314  01D1                     __ptext21:	
  3315 ;; *************** function ___lmul *****************
  3316 ;; Defined at:
  3317 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  multiplier      4    0[COMMON] unsigned long 
  3320 ;;  multiplicand    4    4[COMMON] unsigned long 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  product         4    9[COMMON] unsigned long 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  4    0[COMMON] unsigned long 
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3332 ;;      Params:         8       0       0       0       0
  3333 ;;      Locals:         4       0       0       0       0
  3334 ;;      Temps:          1       0       0       0       0
  3335 ;;      Totals:        13       0       0       0       0
  3336 ;;Total ram usage:       13 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_I2C_Initialize
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           
  3346                           ;psect for function ___lmul
  3347  01D1                     ___lmul:	
  3348                           
  3349                           ;incstack = 0
  3350                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3351  01D1  3000               	movlw	0
  3352  01D2  00FC               	movwf	___lmul@product+3
  3353  01D3  3000               	movlw	0
  3354  01D4  00FB               	movwf	___lmul@product+2
  3355  01D5  3000               	movlw	0
  3356  01D6  00FA               	movwf	___lmul@product+1
  3357  01D7  3000               	movlw	0
  3358  01D8  00F9               	movwf	___lmul@product
  3359  01D9                     l1273:	
  3360  01D9  1C70               	btfss	___lmul@multiplier,0
  3361  01DA  29EF               	goto	l1277
  3362  01DB  0874               	movf	___lmul@multiplicand,w
  3363  01DC  07F9               	addwf	___lmul@product,f
  3364  01DD  0875               	movf	___lmul@multiplicand+1,w
  3365  01DE  1103               	clrz
  3366  01DF  1803               	skipnc
  3367  01E0  3E01               	addlw	1
  3368  01E1  1D03               	btfss	3,2
  3369  01E2  07FA               	addwf	___lmul@product+1,f
  3370  01E3  0876               	movf	___lmul@multiplicand+2,w
  3371  01E4  1103               	clrz
  3372  01E5  1803               	skipnc
  3373  01E6  3E01               	addlw	1
  3374  01E7  1D03               	btfss	3,2
  3375  01E8  07FB               	addwf	___lmul@product+2,f
  3376  01E9  0877               	movf	___lmul@multiplicand+3,w
  3377  01EA  1103               	clrz
  3378  01EB  1803               	skipnc
  3379  01EC  3E01               	addlw	1
  3380  01ED  1D03               	btfss	3,2
  3381  01EE  07FC               	addwf	___lmul@product+3,f
  3382  01EF                     l1277:	
  3383  01EF  3001               	movlw	1
  3384  01F0  00F8               	movwf	??___lmul
  3385  01F1                     u1095:	
  3386  01F1  1003               	clrc
  3387  01F2  0DF4               	rlf	___lmul@multiplicand,f
  3388  01F3  0DF5               	rlf	___lmul@multiplicand+1,f
  3389  01F4  0DF6               	rlf	___lmul@multiplicand+2,f
  3390  01F5  0DF7               	rlf	___lmul@multiplicand+3,f
  3391  01F6  0BF8               	decfsz	??___lmul,f
  3392  01F7  29F1               	goto	u1095
  3393  01F8  3001               	movlw	1
  3394  01F9                     u1105:	
  3395  01F9  1003               	clrc
  3396  01FA  0CF3               	rrf	___lmul@multiplier+3,f
  3397  01FB  0CF2               	rrf	___lmul@multiplier+2,f
  3398  01FC  0CF1               	rrf	___lmul@multiplier+1,f
  3399  01FD  0CF0               	rrf	___lmul@multiplier,f
  3400  01FE  3EFF               	addlw	-1
  3401  01FF  1D03               	skipz
  3402  0200  29F9               	goto	u1105
  3403  0201  0873               	movf	___lmul@multiplier+3,w
  3404  0202  0472               	iorwf	___lmul@multiplier+2,w
  3405  0203  0471               	iorwf	___lmul@multiplier+1,w
  3406  0204  0470               	iorwf	___lmul@multiplier,w
  3407  0205  1D03               	skipz
  3408  0206  29D9               	goto	l1273
  3409  0207  087C               	movf	___lmul@product+3,w
  3410  0208  00F3               	movwf	?___lmul+3
  3411  0209  087B               	movf	___lmul@product+2,w
  3412  020A  00F2               	movwf	?___lmul+2
  3413  020B  087A               	movf	___lmul@product+1,w
  3414  020C  00F1               	movwf	?___lmul+1
  3415  020D  0879               	movf	___lmul@product,w
  3416  020E  00F0               	movwf	?___lmul
  3417  020F  0008               	return
  3418  0210                     __end_of___lmul:	
  3419                           
  3420                           	psect	text22
  3421  034F                     __ptext22:	
  3422 ;; *************** function ___lldiv *****************
  3423 ;; Defined at:
  3424 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  divisor         4    0[BANK0 ] unsigned long 
  3427 ;;  dividend        4    4[BANK0 ] unsigned long 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  quotient        4    8[BANK0 ] unsigned long 
  3430 ;;  counter         1   12[BANK0 ] unsigned char 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  4    0[BANK0 ] unsigned long 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2, status,0
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3440 ;;      Params:         0       8       0       0       0
  3441 ;;      Locals:         0       5       0       0       0
  3442 ;;      Temps:          1       0       0       0       0
  3443 ;;      Totals:         1      13       0       0       0
  3444 ;;Total ram usage:       14 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; This function calls:
  3447 ;;		Nothing
  3448 ;; This function is called by:
  3449 ;;		_I2C_Initialize
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function ___lldiv
  3455  034F                     ___lldiv:	
  3456                           
  3457                           ;incstack = 0
  3458                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3459  034F  3000               	movlw	0
  3460  0350  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0351  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0352  00AB               	movwf	___lldiv@quotient+3
  3463  0353  3000               	movlw	0
  3464  0354  00AA               	movwf	___lldiv@quotient+2
  3465  0355  3000               	movlw	0
  3466  0356  00A9               	movwf	___lldiv@quotient+1
  3467  0357  3000               	movlw	0
  3468  0358  00A8               	movwf	___lldiv@quotient
  3469  0359  0823               	movf	___lldiv@divisor+3,w
  3470  035A  0422               	iorwf	___lldiv@divisor+2,w
  3471  035B  0421               	iorwf	___lldiv@divisor+1,w
  3472  035C  0420               	iorwf	___lldiv@divisor,w
  3473  035D  1903               	skipnz
  3474  035E  2BA6               	goto	l1305
  3475  035F  01AC               	clrf	___lldiv@counter
  3476  0360  0AAC               	incf	___lldiv@counter,f
  3477  0361                     l1291:	
  3478  0361  1BA3               	btfsc	___lldiv@divisor+3,7
  3479  0362  2B71               	goto	l1293
  3480  0363  3001               	movlw	1
  3481  0364  00FD               	movwf	??___lldiv
  3482  0365                     u1135:	
  3483  0365  1003               	clrc
  3484  0366  0DA0               	rlf	___lldiv@divisor,f
  3485  0367  0DA1               	rlf	___lldiv@divisor+1,f
  3486  0368  0DA2               	rlf	___lldiv@divisor+2,f
  3487  0369  0DA3               	rlf	___lldiv@divisor+3,f
  3488  036A  0BFD               	decfsz	??___lldiv,f
  3489  036B  2B65               	goto	u1135
  3490  036C  3001               	movlw	1
  3491  036D  00FD               	movwf	??___lldiv
  3492  036E  087D               	movf	??___lldiv,w
  3493  036F  07AC               	addwf	___lldiv@counter,f
  3494  0370  2B61               	goto	l1291
  3495  0371                     l1293:	
  3496  0371  3001               	movlw	1
  3497  0372  00FD               	movwf	??___lldiv
  3498  0373                     u1155:	
  3499  0373  1003               	clrc
  3500  0374  0DA8               	rlf	___lldiv@quotient,f
  3501  0375  0DA9               	rlf	___lldiv@quotient+1,f
  3502  0376  0DAA               	rlf	___lldiv@quotient+2,f
  3503  0377  0DAB               	rlf	___lldiv@quotient+3,f
  3504  0378  0BFD               	decfsz	??___lldiv,f
  3505  0379  2B73               	goto	u1155
  3506  037A  0823               	movf	___lldiv@divisor+3,w
  3507  037B  0227               	subwf	___lldiv@dividend+3,w
  3508  037C  1D03               	skipz
  3509  037D  2B88               	goto	u1165
  3510  037E  0822               	movf	___lldiv@divisor+2,w
  3511  037F  0226               	subwf	___lldiv@dividend+2,w
  3512  0380  1D03               	skipz
  3513  0381  2B88               	goto	u1165
  3514  0382  0821               	movf	___lldiv@divisor+1,w
  3515  0383  0225               	subwf	___lldiv@dividend+1,w
  3516  0384  1D03               	skipz
  3517  0385  2B88               	goto	u1165
  3518  0386  0820               	movf	___lldiv@divisor,w
  3519  0387  0224               	subwf	___lldiv@dividend,w
  3520  0388                     u1165:	
  3521  0388  1C03               	skipc
  3522  0389  2B99               	goto	l1301
  3523  038A  0820               	movf	___lldiv@divisor,w
  3524  038B  02A4               	subwf	___lldiv@dividend,f
  3525  038C  0821               	movf	___lldiv@divisor+1,w
  3526  038D  1C03               	skipc
  3527  038E  0F21               	incfsz	___lldiv@divisor+1,w
  3528  038F  02A5               	subwf	___lldiv@dividend+1,f
  3529  0390  0822               	movf	___lldiv@divisor+2,w
  3530  0391  1C03               	skipc
  3531  0392  0F22               	incfsz	___lldiv@divisor+2,w
  3532  0393  02A6               	subwf	___lldiv@dividend+2,f
  3533  0394  0823               	movf	___lldiv@divisor+3,w
  3534  0395  1C03               	skipc
  3535  0396  0F23               	incfsz	___lldiv@divisor+3,w
  3536  0397  02A7               	subwf	___lldiv@dividend+3,f
  3537  0398  1428               	bsf	___lldiv@quotient,0
  3538  0399                     l1301:	
  3539  0399  3001               	movlw	1
  3540  039A                     u1175:	
  3541  039A  1003               	clrc
  3542  039B  0CA3               	rrf	___lldiv@divisor+3,f
  3543  039C  0CA2               	rrf	___lldiv@divisor+2,f
  3544  039D  0CA1               	rrf	___lldiv@divisor+1,f
  3545  039E  0CA0               	rrf	___lldiv@divisor,f
  3546  039F  3EFF               	addlw	-1
  3547  03A0  1D03               	skipz
  3548  03A1  2B9A               	goto	u1175
  3549  03A2  3001               	movlw	1
  3550  03A3  02AC               	subwf	___lldiv@counter,f
  3551  03A4  1D03               	btfss	3,2
  3552  03A5  2B71               	goto	l1293
  3553  03A6                     l1305:	
  3554  03A6  082B               	movf	___lldiv@quotient+3,w
  3555  03A7  00A3               	movwf	?___lldiv+3
  3556  03A8  082A               	movf	___lldiv@quotient+2,w
  3557  03A9  00A2               	movwf	?___lldiv+2
  3558  03AA  0829               	movf	___lldiv@quotient+1,w
  3559  03AB  00A1               	movwf	?___lldiv+1
  3560  03AC  0828               	movf	___lldiv@quotient,w
  3561  03AD  00A0               	movwf	?___lldiv
  3562  03AE  0008               	return
  3563  03AF                     __end_of___lldiv:	
  3564  007E                     btemp	set	126	;btemp
  3565  007E                     wtemp	set	126
  3566  007E                     wtemp0	set	126
  3567  0080                     wtemp1	set	128
  3568  0082                     wtemp2	set	130
  3569  0084                     wtemp3	set	132
  3570  0086                     wtemp4	set	134
  3571  0088                     wtemp5	set	136
  3572  007F                     wtemp6	set	127
  3573  007E                     ttemp	set	126
  3574  007E                     ttemp0	set	126
  3575  0081                     ttemp1	set	129
  3576  0084                     ttemp2	set	132
  3577  0087                     ttemp3	set	135
  3578  007F                     ttemp4	set	127
  3579  007E                     ltemp	set	126
  3580  007E                     ltemp0	set	126
  3581  0082                     ltemp1	set	130
  3582  0086                     ltemp2	set	134
  3583  0080                     ltemp3	set	128


Data Sizes:
    Strings     44
    Constant    0
    Data        11
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      58
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Print_String@a	PTR unsigned char  size(1) Largest target is 17
		 -> STR_4(CODE[8]), STR_3(CODE[7]), STR_2(CODE[17]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _BCD_2_DEC->_I2C_Read
    _BCD_2_DEC->___wmul
    _Set_Time_Date->_DEC_2_BCD
    _I2C_Write->_DEC_2_BCD
    _DEC_2_BCD->___awdiv
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit
    _I2C_Initialize->___lldiv
    ___lldiv->___lmul

Critical Paths under _main in BANK0

    _main->_I2C_Initialize
    _Update_Current_Date_Time->_I2C_Write
    _Set_Time_Date->_I2C_Write
    _I2C_Initialize->___lldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    8021
                                             21 BANK0      9     9      0
                     _I2C_Initialize
                          _Lcd_Clear
                     _Lcd_Print_Char
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                          _Lcd_Start
                      _Set_Time_Date
           _Update_Current_Date_Time
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Update_Current_Date_Time                             0     0      0    1740
                          _BCD_2_DEC
                          _I2C_Begin
                            _I2C_End
                           _I2C_Read
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             6     4      2     469
                                              0 COMMON     6     4      2
                           _I2C_Hold
 ---------------------------------------------------------------------------------
 (2) _BCD_2_DEC                                            4     2      2     560
                                              6 COMMON     4     2      2
                           _I2C_Read (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Set_Time_Date                                        0     0      0    2517
                          _DEC_2_BCD
                          _I2C_Begin
                            _I2C_End
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            2     0      2     711
                                              0 BANK0      2     0      2
                          _DEC_2_BCD (ARG)
                           _I2C_Hold
 ---------------------------------------------------------------------------------
 (2) _I2C_End                                              0     0      0       0
                           _I2C_Hold
 ---------------------------------------------------------------------------------
 (2) _I2C_Begin                                            0     0      0       0
                           _I2C_Hold
 ---------------------------------------------------------------------------------
 (3) _I2C_Hold                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DEC_2_BCD                                            4     2      2    1806
                                              9 COMMON     4     2      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     720
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     724
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            4     4      0     244
                                              4 COMMON     4     4      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     645
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Print_String                                     3     3      0     376
                                              5 COMMON     3     3      0
                     _Lcd_Print_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Print_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) _Lcd_SetBit                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Initialize                                       8     4      4     541
                                             13 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                             13 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Initialize
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_SetBit
   _Lcd_Print_Char
     _Lcd_SetBit
   _Lcd_Print_String
     _Lcd_Print_Char
       _Lcd_SetBit
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_SetBit
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Set_Time_Date
     _DEC_2_BCD
       ___awdiv
       ___awmod
     _I2C_Begin
       _I2C_Hold
     _I2C_End
       _I2C_Hold
     _I2C_Write
       _DEC_2_BCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Hold (ARG)
   _Update_Current_Date_Time
     _BCD_2_DEC
       _I2C_Read (ARG)
         _I2C_Hold
       ___wmul (ARG)
     _I2C_Begin
       _I2C_Hold
     _I2C_End
       _I2C_Hold
     _I2C_Read
       _I2C_Hold
     _I2C_Write
       _DEC_2_BCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Hold (ARG)
   ___awdiv
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      3A       5       72.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      48      12        0.0%
ABS                  0      0      48       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon May 14 12:54:14 2018

               __size_of_I2C_Begin 0007                                  pc 0002  
                      __CFG_CP$OFF 0000                 __size_of_I2C_Write 0008  
                               l91 00AB                                 l92 00AE  
                               l93 00B2                                 l94 00B3  
                               l95 00B7                                 l96 00B8  
                               l97 00BC                       ___awdiv@sign 0076  
               __size_of_DEC_2_BCD 002E                                 fsr 0004  
              ___wmul@multiplicand 0072                                l114 03C4  
                              l162 072C                                l163 0728  
                              l172 0739                                l190 07D8  
                              l182 074F                                l167 0731  
                              l176 073F                                l186 075F  
                              l277 00E2                                _RB0 0030  
                              _RB1 0031                                _RB2 0032  
                              _RB3 0033                                _RB4 0034  
                              _RD1 0041                                _RD2 0042  
                              _RD3 0043                                _RD4 0044  
                              _RD5 0045                                _RD6 0046  
                              _RD7 0047                                _PEN 048A  
                     __CFG_CPD$OFF 0000                                _SEN 0488  
                              u905 0322                                u825 00E3  
                              u915 032E                                u835 00EA  
                              u925 0338                                u885 0316  
                              u985 0274                    __end_of_I2C_End 0064  
                              _min 0053                                _sec 0046  
                              _pos 0059                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0076  
                     __CFG_FOSC$HS 0000                       __CFG_LVP$OFF 0000  
                             l1111 00DA                               l1201 02A0  
                             l1105 0074                               l1131 0300  
                             l1301 0399                               l1305 03A6  
                             l1321 0235                               l1137 030B  
                             l1163 034A                               l1155 0337  
                             l1147 0313                               l1149 0321  
                             l1413 060C                               l1343 03D6  
                             l1159 0342                               l1175 0264  
                             l1503 075D                               l1273 01D9  
                             l1193 028D                               l1257 0164  
                             l1513 0784                               l1291 0361  
                             l1371 00FC                               l1187 0271  
                             l1179 026B                               l1293 0371  
                             l1277 01EF                               l1189 027F  
                             l1197 0298                               l1525 07B7  
                             l1509 0773                               l1491 0745  
                             l1485 073D                               l1477 0734  
                             l1495 074C                               l1497 074D  
                             STR_1 001A                               STR_2 0009  
                             STR_3 002E                               STR_4 0026  
                             u1005 0285                               u1015 028E  
                             u1105 01F9                               u1050 0161  
                             u1045 01A9                               u1205 021C  
                             u1135 0365                               u1225 0241  
                             u1155 0373                               u1235 03C2  
                             u1165 0388                               u1245 03D4  
                             u1175 039A                               u1095 01F1  
                             u1265 02BB                               u1507 071A  
                             u1517 07C1                               u1445 0792  
                             u1527 07D1                               u1455 079D  
                             u1537 07E0                               u1465 07A8  
                             u1547 03E0                               u1475 07B3  
                             u1557 03EF                               u1567 01B9  
                             u1577 01CA                               u1497 0605  
                             u1587 00CF                               _RCEN 048B  
                     __CFG_WRT$OFF 0000                               _date 004F  
                             _main 05BA                               _hour 0051  
                 __end_of_I2C_Hold 007D                               _jump 004C  
                 __end_of_I2C_Read 016A                               _year 0057  
                             btemp 007E                      __CFG_BOREN$ON 0000  
                             ltemp 007E                               start 0000  
                             ttemp 007E                               wtemp 007E  
               Lcd_Print_Char@data 0074                    __end_of_Lcd_Cmd 00D8  
                       _Lcd_SetBit 00A4                              ?_main 0070  
                            _ACKEN 048C                              _ACKDT 048D  
                  __end_of___awdiv 034F                      __CFG_WDTE$OFF 0000  
                  __end_of___awmod 02A5                    __end_of___lldiv 03AF  
                  ___awdiv@divisor 0070                    ___awdiv@counter 0075  
          __size_of_Lcd_Set_Cursor 004A                              _TRISB 0086  
                            _TRISD 0088                ___lmul@multiplicand 0074  
                    __CFG_PWRTE$ON 0000                      _trigger_alarm 004E  
                __end_of_BCD_2_DEC 013E                  __end_of_I2C_Begin 005D  
                            _month 0055                  __end_of_I2C_Write 006C  
                            pclath 000A                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080                  __end_of_DEC_2_BCD 0198  
        __size_of_Lcd_Print_String 0022                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
          __size_of_Lcd_Print_Char 0039                    __initialization 07E8  
                     __end_of_main 07E8                          ??_I2C_End 0070  
                           ??_main 0035                 __size_of_Lcd_Clear 000B  
               __size_of_Lcd_Start 0074                   ___awdiv@dividend 0072  
                        ??_Lcd_Cmd 0071                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _SSPCON 0014                             _SSPBUF 0013  
                           ___lmul 01D1                             ___wmul 00D8  
                        ??___awdiv 0074                          ??___awmod 0074  
                        ??___lldiv 007D                        ?_Lcd_SetBit 0070  
                 ___awdiv@quotient 0077                    ___awmod@divisor 0070  
                  ___awmod@counter 0075            __size_of_I2C_Initialize 0051  
 __end_of_Update_Current_Date_Time 05BA                          ?_I2C_Hold 0070  
                        ?_I2C_Read 0070                    Lcd_Set_Cursor@a 0077  
                  Lcd_Set_Cursor@b 0074                    Lcd_Set_Cursor@y 0079  
                  Lcd_Set_Cursor@z 0078            __end_of__initialization 07FC  
                __end_of_Lcd_Clear 0088                  __end_of_Lcd_Start 0423  
                   __pcstackCOMMON 0070                       __pidataBANK0 0088  
                   _Lcd_Set_Cursor 0210                         ??_I2C_Hold 0070  
                       ??_I2C_Read 0072                         __pbssBANK0 003E  
                 _Lcd_Print_String 00F9                __size_of_Lcd_SetBit 001A  
                   _Lcd_Print_Char 0198                         __pmaintext 05BA  
                          ?___lmul 0070                            ?___wmul 0070  
                          _I2C_End 005D                     ___lmul@product 0079  
               Lcd_SetBit@data_bit 0070             __end_of_Lcd_Set_Cursor 025A  
                 I2C_Read@incoming 0074           _Update_Current_Date_Time 04D0  
           __size_of_Set_Time_Date 00AD                            _SSPCON2 0091  
                          _SSPSTAT 0094                         __stringtab 0003  
                        _BCD_2_DEC 011B                            _Lcd_Cmd 00BE  
           __end_of_Lcd_Print_Char 01D1                          _I2C_Begin 0056  
                        _I2C_Write 0064                          _DEC_2_BCD 016A  
                          ___awdiv 02F6                    __size_of___lmul 003F  
                          ___awmod 025A                            ___lldiv 034F  
                  __size_of___wmul 0021                     _I2C_Initialize 02A5  
                  ?_Lcd_Set_Cursor 0074                            __ptext1 04D0  
                          __ptext2 013E                            __ptext3 011B  
                          __ptext4 00D8                            __ptext5 0423  
                          __ptext6 0064                            __ptext7 005D  
                          __ptext8 0056                            __ptext9 0074  
                 ___awmod@dividend 0072                            clrloop0 006D  
             end_of_initialization 07FC                         ?_BCD_2_DEC 0076  
                       ?_I2C_Begin 0070                    ?_Lcd_Print_Char 0070  
                       ?_I2C_Write 0020                         ?_DEC_2_BCD 0079  
                  ___lldiv@divisor 0020                    ___lldiv@counter 002C  
                    _Set_Time_Date 0423             __end_of_I2C_Initialize 02F6  
                     ??_Lcd_SetBit 0070                  __size_of_I2C_Hold 0009  
                __size_of_I2C_Read 002C                 __end_of_Lcd_SetBit 00BE  
                       main@hour_0 003C                         main@hour_1 003D  
                   ?_Set_Time_Date 0070                          _Lcd_Clear 007D  
              BCD_2_DEC@to_convert 0076                    ?_I2C_Initialize 002D  
                        _Lcd_Start 03AF                     __end_of___lmul 0210  
                   __end_of___wmul 00F9           __end_of_Lcd_Print_String 011B  
              start_initialization 07E8                        ??_BCD_2_DEC 0078  
                      ??_I2C_Begin 0070                  Lcd_Print_String@a 0077  
                Lcd_Print_String@i 0075                        ??_I2C_Write 007D  
                      ??_DEC_2_BCD 007B                         ?_Lcd_Clear 0070  
                         ??___lmul 0078                           ??___wmul 0074  
                       init_fetch0 0093                         ?_Lcd_Start 0070  
                      __pdataBANK0 004F                           ?_I2C_End 0070  
       ??_Update_Current_Date_Time 007D         Lcd_Print_Char@Lower_Nibble 0072  
                        ___latbits 0002                      __pcstackBANK0 0020  
                         ?_Lcd_Cmd 0070                    ??_Set_Time_Date 007D  
                        _alarm_val 003E                        I2C_Read@ack 0070  
                 ??_Lcd_Set_Cursor 0075                           ?___awdiv 0070  
                         ?___awmod 0070                           ?___lldiv 0020  
                        __pstrings 0003                           _I2C_Hold 0074  
                         _I2C_Read 013E                   ??_Lcd_Print_Char 0071  
                   ___wmul@product 0074                          clear_ram0 006C  
                        _set_alarm 004D                           Lcd_Cmd@a 0073  
                      ??_Lcd_Clear 0074                        ??_Lcd_Start 0074  
                 __size_of_I2C_End 0007                        __stringbase 0008  
                ___wmul@multiplier 0070                          main@min_0 003A  
                        main@min_1 003B                          main@sec_0 0038  
                        main@sec_1 0039                  ___lmul@multiplier 0070  
                 __size_of_Lcd_Cmd 001A                   ??_I2C_Initialize 0031  
                    I2C_Write@data 0020                   __size_of___awdiv 0059  
                 __size_of___awmod 004B                   __size_of___lldiv 0060  
               __end_of__stringtab 0009                  ?_Lcd_Print_String 0070  
               ??_Lcd_Print_String 0075                           _alarm_h0 0048  
                         _alarm_h1 0049                           _alarm_m0 004A  
                         _alarm_m1 004B                           __ptext10 016A  
                         __ptext11 025A                           __ptext20 02A5  
                         __ptext12 02F6                           __ptext21 01D1  
                         __ptext13 03AF                           __ptext22 034F  
                         __ptext14 0210                           __ptext15 00F9  
                         __ptext16 0198                           __ptext17 007D  
                         __ptext18 00BE                           __ptext19 00A4  
                    __size_of_main 022E                I2C_Initialize@feq_K 002D  
       Lcd_Print_Char@Upper_Nibble 0073                           init_ram0 0097  
                 ___lldiv@dividend 0024                          stringcode 0003  
               Lcd_Set_Cursor@temp 007A                         Lcd_Start@i 0076  
                       _OPTION_REG 0081                   ___lldiv@quotient 0028  
                         stringdir 0003                           stringtab 0003  
__size_of_Update_Current_Date_Time 00EA          ?_Update_Current_Date_Time 0070  
            __end_of_Set_Time_Date 04D0                DEC_2_BCD@to_convert 0079  
               __size_of_BCD_2_DEC 0023  
