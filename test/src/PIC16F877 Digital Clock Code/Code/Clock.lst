

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Nov 25 00:44:55 2012

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text273,local,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,delta=2
    11                           	psect	text274,local,class=CODE,delta=2
    12                           	psect	text279,local,class=CODE,delta=2
    13                           	psect	text284,local,class=CODE,delta=2
    14                           	psect	text285,local,class=CODE,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text286,local,class=CODE,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  000A                     	;#
    20                           
    21                           	psect	config
    22  2007  FF72               	dw	65394	;#
    23                           
    24                           	psect	text273
    25  0000                     __ptext273:	
    26  0006                     _PORTB	set	6
    27  0001                     _TMR0	set	1
    28  005F                     _GIE	set	95
    29  0030                     _RB0	set	48
    30  0031                     _RB1	set	49
    31  0034                     _RB4	set	52
    32  0035                     _RB5	set	53
    33  0036                     _RB6	set	54
    34  0037                     _RB7	set	55
    35  005D                     _T0IE	set	93
    36  005A                     _T0IF	set	90
    37  0081                     _OPTION_REG	set	129
    38  0430                     _TRISB0	set	1072
    39  0431                     _TRISB1	set	1073
    40  0434                     _TRISB4	set	1076
    41  0435                     _TRISB5	set	1077
    42  0436                     _TRISB6	set	1078
    43  0437                     _TRISB7	set	1079
    44                           
    45                           	psect	cinit
    46  01CF                     start_initialization:	
    47                           
    48                           ; Clear objects allocated to BANK0
    49  01CF  01A0               	clrf	__pbssBANK0& (0+127)
    50  01D0  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    51  01D1  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    52  01D2  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    53  01D3  01A4               	clrf	(__pbssBANK0+4)& (0+127)
    54  01D4  01A5               	clrf	(__pbssBANK0+5)& (0+127)
    55  01D5  01A6               	clrf	(__pbssBANK0+6)& (0+127)
    56  01D6  01A7               	clrf	(__pbssBANK0+7)& (0+127)
    57  01D7                     end_of_initialization:	
    58                           ;End of C runtime variable initialization code
    59                           
    60  01D7  0183               	clrf	3
    61  01D8  120A  118A  2998   	ljmp	_main	;jump to C main() function
    62                           
    63                           	psect	bssBANK0
    64  0020                     __pbssBANK0:	
    65  0020                     _hrCounter:	
    66  0020                     	ds	2
    67  0022                     _minCounter:	
    68  0022                     	ds	2
    69  0024                     _msCounter:	
    70  0024                     	ds	2
    71  0026                     _secCounter:	
    72  0026                     	ds	2
    73                           
    74                           	psect	cstackCOMMON
    75  0070                     __pcstackCOMMON:	
    76  0070                     ?_Init1msecTimerInterrupt:	
    77  0070                     ?_UpdateTimeCounters:	
    78                           ; 0 bytes @ 0x0
    79                           
    80  0070                     ?_ToggleEpinOfLCD:	
    81                           ; 0 bytes @ 0x0
    82                           
    83  0070                     ?_WriteCommandToLCD:	
    84                           ; 0 bytes @ 0x0
    85                           
    86  0070                     ?_WriteDataToLCD:	
    87                           ; 0 bytes @ 0x0
    88                           
    89  0070                     ?_InitLCD:	
    90                           ; 0 bytes @ 0x0
    91                           
    92  0070                     ?_ClearLCDScreen:	
    93                           ; 0 bytes @ 0x0
    94                           
    95  0070                     ?_main:	
    96                           ; 0 bytes @ 0x0
    97                           
    98  0070                     ?_InitTimer0:	
    99                           ; 0 bytes @ 0x0
   100                           
   101  0070                     ?_ISR:	
   102                           ; 0 bytes @ 0x0
   103                           
   104  0070                     ??_ISR:	
   105                           ; 0 bytes @ 0x0
   106                           
   107                           
   108                           ; 0 bytes @ 0x0
   109  0070                     	ds	2
   110  0072                     ??_Init1msecTimerInterrupt:	
   111  0072                     ??_UpdateTimeCounters:	
   112                           ; 0 bytes @ 0x2
   113                           
   114  0072                     ??_ToggleEpinOfLCD:	
   115                           ; 0 bytes @ 0x2
   116                           
   117  0072                     ??_InitTimer0:	
   118                           ; 0 bytes @ 0x2
   119                           
   120  0072                     ?___lwdiv:	
   121                           ; 0 bytes @ 0x2
   122                           
   123  0072                     ?___lwmod:	
   124                           ; 2 bytes @ 0x2
   125                           
   126  0072                     ___lwdiv@divisor:	
   127                           ; 2 bytes @ 0x2
   128                           
   129  0072                     ___lwmod@divisor:	
   130                           ; 2 bytes @ 0x2
   131                           
   132                           
   133                           ; 2 bytes @ 0x2
   134  0072                     	ds	1
   135  0073                     ??_WriteCommandToLCD:	
   136  0073                     ??_WriteDataToLCD:	
   137                           ; 0 bytes @ 0x3
   138                           
   139  0073                     WriteCommandToLCD@Command:	
   140                           ; 0 bytes @ 0x3
   141                           
   142  0073                     WriteDataToLCD@LCDChar:	
   143                           ; 1 bytes @ 0x3
   144                           
   145                           
   146                           ; 1 bytes @ 0x3
   147  0073                     	ds	1
   148  0074                     ??_InitLCD:	
   149  0074                     ??_ClearLCDScreen:	
   150                           ; 0 bytes @ 0x4
   151                           
   152  0074                     ___lwdiv@dividend:	
   153                           ; 0 bytes @ 0x4
   154                           
   155  0074                     ___lwmod@dividend:	
   156                           ; 2 bytes @ 0x4
   157                           
   158                           
   159                           ; 2 bytes @ 0x4
   160  0074                     	ds	2
   161  0076                     ??___lwdiv:	
   162  0076                     ??___lwmod:	
   163                           ; 0 bytes @ 0x6
   164                           
   165  0076                     ___lwmod@counter:	
   166                           ; 0 bytes @ 0x6
   167                           
   168  0076                     ___lwdiv@quotient:	
   169                           ; 1 bytes @ 0x6
   170                           
   171                           
   172                           ; 2 bytes @ 0x6
   173  0076                     	ds	2
   174  0078                     ___lwdiv@counter:	
   175                           
   176                           ; 1 bytes @ 0x8
   177  0078                     	ds	1
   178  0079                     ??_DisplayTimeToLCD:	
   179  0079                     ??_main:	
   180                           ; 0 bytes @ 0x9
   181                           
   182                           
   183                           	psect	cstackBANK0
   184  0028                     __pcstackBANK0:	
   185                           ; 0 bytes @ 0x9
   186                           
   187  0028                     ?_DisplayTimeToLCD:	
   188  0028                     DisplayTimeToLCD@h:	
   189                           ; 0 bytes @ 0x0
   190                           
   191                           
   192                           ; 2 bytes @ 0x0
   193  0028                     	ds	2
   194  002A                     DisplayTimeToLCD@m:	
   195                           
   196                           ; 2 bytes @ 0x2
   197  002A                     	ds	2
   198  002C                     DisplayTimeToLCD@s:	
   199                           
   200                           ; 2 bytes @ 0x4
   201  002C                     	ds	2
   202                           
   203                           	psect	maintext
   204  0198                     __pmaintext:	
   205 ;;Data sizes: Strings 0, constant 0, data 0, bss 8, persistent 0 stack 0
   206 ;;Auto spaces:   Size  Autos    Used
   207 ;; COMMON          14      9       9
   208 ;; BANK0           80      6      14
   209 ;; BANK1           80      0       0
   210 ;; BANK3           96      0       0
   211 ;; BANK2           96      0       0
   212 ;;
   213 ;; Pointer list with targets:
   214 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
   215 ;;
   216 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   217 ;;
   218 ;;
   219 ;; Critical Paths under _main in COMMON
   220 ;;
   221 ;;   _DisplayTimeToLCD->___lwdiv
   222 ;;   _ClearLCDScreen->_WriteCommandToLCD
   223 ;;   _InitLCD->_WriteCommandToLCD
   224 ;;   _WriteDataToLCD->_ToggleEpinOfLCD
   225 ;;   _WriteCommandToLCD->_ToggleEpinOfLCD
   226 ;;
   227 ;; Critical Paths under _ISR in COMMON
   228 ;;
   229 ;;   None.
   230 ;;
   231 ;; Critical Paths under _main in BANK0
   232 ;;
   233 ;;   _main->_DisplayTimeToLCD
   234 ;;
   235 ;; Critical Paths under _ISR in BANK0
   236 ;;
   237 ;;   None.
   238 ;;
   239 ;; Critical Paths under _main in BANK1
   240 ;;
   241 ;;   None.
   242 ;;
   243 ;; Critical Paths under _ISR in BANK1
   244 ;;
   245 ;;   None.
   246 ;;
   247 ;; Critical Paths under _main in BANK3
   248 ;;
   249 ;;   None.
   250 ;;
   251 ;; Critical Paths under _ISR in BANK3
   252 ;;
   253 ;;   None.
   254 ;;
   255 ;; Critical Paths under _main in BANK2
   256 ;;
   257 ;;   None.
   258 ;;
   259 ;; Critical Paths under _ISR in BANK2
   260 ;;
   261 ;;   None.
   262 ;;
   263 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   264 ;;
   265 ;;
   266 ;;Call Graph Tables:
   267 ;;
   268 ;; ---------------------------------------------------------------------------------
   269 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   270 ;; ---------------------------------------------------------------------------------
   271 ;; (0) _main                                                 0     0      0     585
   272 ;;                            _InitLCD
   273 ;;            _Init1msecTimerInterrupt
   274 ;;                   _DisplayTimeToLCD
   275 ;;                 _UpdateTimeCounters
   276 ;; ---------------------------------------------------------------------------------
   277 ;; (1) _DisplayTimeToLCD                                     6     0      6     541
   278 ;;                                              0 BANK0      6     0      6
   279 ;;                     _ClearLCDScreen
   280 ;;                            ___lwdiv
   281 ;;                     _WriteDataToLCD
   282 ;;                            ___lwmod
   283 ;; ---------------------------------------------------------------------------------
   284 ;; (2) _ClearLCDScreen                                       2     2      0      44
   285 ;;                                              4 COMMON     2     2      0
   286 ;;                  _WriteCommandToLCD
   287 ;; ---------------------------------------------------------------------------------
   288 ;; (1) _InitLCD                                              2     2      0      44
   289 ;;                                              4 COMMON     2     2      0
   290 ;;                    _ToggleEpinOfLCD
   291 ;;                  _WriteCommandToLCD
   292 ;; ---------------------------------------------------------------------------------
   293 ;; (2) _WriteDataToLCD                                       1     1      0      44
   294 ;;                                              3 COMMON     1     1      0
   295 ;;                    _ToggleEpinOfLCD
   296 ;; ---------------------------------------------------------------------------------
   297 ;; (3) _WriteCommandToLCD                                    1     1      0      44
   298 ;;                                              3 COMMON     1     1      0
   299 ;;                    _ToggleEpinOfLCD
   300 ;; ---------------------------------------------------------------------------------
   301 ;; (1) _Init1msecTimerInterrupt                              0     0      0       0
   302 ;;                         _InitTimer0
   303 ;; ---------------------------------------------------------------------------------
   304 ;; (3) _ToggleEpinOfLCD                                      1     1      0       0
   305 ;;                                              2 COMMON     1     1      0
   306 ;; ---------------------------------------------------------------------------------
   307 ;; (2) ___lwmod                                              5     1      4     159
   308 ;;                                              2 COMMON     5     1      4
   309 ;; ---------------------------------------------------------------------------------
   310 ;; (2) ___lwdiv                                              7     3      4     162
   311 ;;                                              2 COMMON     7     3      4
   312 ;; ---------------------------------------------------------------------------------
   313 ;; (2) _InitTimer0                                           0     0      0       0
   314 ;; ---------------------------------------------------------------------------------
   315 ;; (1) _UpdateTimeCounters                                   0     0      0       0
   316 ;; ---------------------------------------------------------------------------------
   317 ;; Estimated maximum stack depth 3
   318 ;; ---------------------------------------------------------------------------------
   319 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   320 ;; ---------------------------------------------------------------------------------
   321 ;; (5) _ISR                                                  2     2      0       0
   322 ;;                                              0 COMMON     2     2      0
   323 ;; ---------------------------------------------------------------------------------
   324 ;; Estimated maximum stack depth 5
   325 ;; ---------------------------------------------------------------------------------
   326 ;; Call Graph Graphs:
   327 ;; _main (ROOT)
   328 ;;   _InitLCD
   329 ;;     _ToggleEpinOfLCD
   330 ;;     _WriteCommandToLCD
   331 ;;       _ToggleEpinOfLCD
   332 ;;   _Init1msecTimerInterrupt
   333 ;;     _InitTimer0
   334 ;;   _DisplayTimeToLCD
   335 ;;     _ClearLCDScreen
   336 ;;       _WriteCommandToLCD
   337 ;;         _ToggleEpinOfLCD
   338 ;;     ___lwdiv
   339 ;;     _WriteDataToLCD
   340 ;;       _ToggleEpinOfLCD
   341 ;;     ___lwmod
   342 ;;   _UpdateTimeCounters
   343 ;;
   344 ;; _ISR (ROOT)
   345 ;;
   346 ;; Address spaces:
   347 ;;Name               Size   Autos  Total    Cost      Usage
   348 ;;BITCOMMON            E      0       0       0        0.0%
   349 ;;EEDATA             100      0       0       0        0.0%
   350 ;;NULL                 0      0       0       0        0.0%
   351 ;;CODE                 0      0       0       0        0.0%
   352 ;;COMMON               E      9       9       1       64.3%
   353 ;;BITSFR0              0      0       0       1        0.0%
   354 ;;SFR0                 0      0       0       1        0.0%
   355 ;;BITSFR1              0      0       0       2        0.0%
   356 ;;SFR1                 0      0       0       2        0.0%
   357 ;;STACK                0      0       4       2        0.0%
   358 ;;ABS                  0      0      17       3        0.0%
   359 ;;BITBANK0            50      0       0       4        0.0%
   360 ;;BITSFR3              0      0       0       4        0.0%
   361 ;;SFR3                 0      0       0       4        0.0%
   362 ;;BANK0               50      6       E       5       17.5%
   363 ;;BITSFR2              0      0       0       5        0.0%
   364 ;;SFR2                 0      0       0       5        0.0%
   365 ;;BITBANK1            50      0       0       6        0.0%
   366 ;;BANK1               50      0       0       7        0.0%
   367 ;;BITBANK3            60      0       0       8        0.0%
   368 ;;BANK3               60      0       0       9        0.0%
   369 ;;BITBANK2            60      0       0      10        0.0%
   370 ;;BANK2               60      0       0      11        0.0%
   371 ;;DATA                 0      0      1B      12        0.0%
   372                           
   373                           
   374 ;; *************** function _main *****************
   375 ;; Defined at:
   376 ;;		line 16 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\Main.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;		None
   381 ;; Return value:  Size  Location     Type
   382 ;;		None               void
   383 ;; Registers used:
   384 ;;		wreg, status,2, status,0, pclath, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : 17F/0
   387 ;;		On exit  : 60/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   390 ;;      Params:         0       0       0       0       0
   391 ;;      Locals:         0       0       0       0       0
   392 ;;      Temps:          0       0       0       0       0
   393 ;;      Totals:         0       0       0       0       0
   394 ;;Total ram usage:        0 bytes
   395 ;; Hardware stack levels required when called:    5
   396 ;; This function calls:
   397 ;;		_InitLCD
   398 ;;		_Init1msecTimerInterrupt
   399 ;;		_DisplayTimeToLCD
   400 ;;		_UpdateTimeCounters
   401 ;; This function is called by:
   402 ;;		Startup code after reset
   403 ;; This function uses a non-reentrant model
   404 ;;
   405  0198                     _main:	
   406                           
   407                           ;Main.c: 17: InitLCD();
   408                           
   409                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   410  0198  120A  118A  20D8   	fcall	_InitLCD
      +       120A  118A         
   411                           
   412                           ;Main.c: 18: Init1msecTimerInterrupt();
   413  019D  120A  118A  21DB   	fcall	_Init1msecTimerInterrupt
      +       120A  118A         
   414  01A2                     l4059:	
   415                           
   416                           ;Main.c: 21: {
   417                           ;Main.c: 22: if( msCounter == 0 )
   418  01A2  1283               	bcf	3,5	;RP0=0, select bank0
   419  01A3  0825               	movf	_msCounter+1,w
   420  01A4  0424               	iorwf	_msCounter,w
   421  01A5  1D03               	skipz
   422  01A6  29B8               	goto	l1322
   423                           
   424                           ;Main.c: 23: {
   425                           ;Main.c: 25: DisplayTimeToLCD(hrCounter, minCounter, secCounter);
   426  01A7  0821               	movf	_hrCounter+1,w
   427  01A8  00A9               	movwf	?_DisplayTimeToLCD+1
   428  01A9  0820               	movf	_hrCounter,w
   429  01AA  00A8               	movwf	?_DisplayTimeToLCD
   430  01AB  0823               	movf	_minCounter+1,w
   431  01AC  00AB               	movwf	?_DisplayTimeToLCD+3
   432  01AD  0822               	movf	_minCounter,w
   433  01AE  00AA               	movwf	?_DisplayTimeToLCD+2
   434  01AF  0827               	movf	_secCounter+1,w
   435  01B0  00AD               	movwf	?_DisplayTimeToLCD+5
   436  01B1  0826               	movf	_secCounter,w
   437  01B2  00AC               	movwf	?_DisplayTimeToLCD+4
   438  01B3  120A  118A  200F   	fcall	_DisplayTimeToLCD
      +       120A  118A         
   439  01B8                     l1322:	
   440                           
   441                           ;Main.c: 26: }
   442                           ;Main.c: 28: UpdateTimeCounters();
   443  01B8  120A  118A  216E   	fcall	_UpdateTimeCounters
      +       120A  118A         
   444  01BD  29A2               	goto	l4059
   445  01BE                     __end_of_main:	
   446                           
   447                           	psect	text274
   448  000F                     __ptext274:	
   449 ;; =============== function _main ends ============
   450                           
   451                           
   452 ;; *************** function _DisplayTimeToLCD *****************
   453 ;; Defined at:
   454 ;;		line 107 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\LCD.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;  h               2    0[BANK0 ] unsigned int 
   457 ;;  m               2    2[BANK0 ] unsigned int 
   458 ;;  s               2    4[BANK0 ] unsigned int 
   459 ;; Auto vars:     Size  Location     Type
   460 ;;		None
   461 ;; Return value:  Size  Location     Type
   462 ;;		None               void
   463 ;; Registers used:
   464 ;;		wreg, status,2, status,0, pclath, cstack
   465 ;; Tracked objects:
   466 ;;		On entry : 60/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   470 ;;      Params:         0       6       0       0       0
   471 ;;      Locals:         0       0       0       0       0
   472 ;;      Temps:          0       0       0       0       0
   473 ;;      Totals:         0       6       0       0       0
   474 ;;Total ram usage:        6 bytes
   475 ;; Hardware stack levels used:    1
   476 ;; Hardware stack levels required when called:    4
   477 ;; This function calls:
   478 ;;		_ClearLCDScreen
   479 ;;		___lwdiv
   480 ;;		_WriteDataToLCD
   481 ;;		___lwmod
   482 ;; This function is called by:
   483 ;;		_main
   484 ;; This function uses a non-reentrant model
   485 ;;
   486  000F                     _DisplayTimeToLCD:	
   487                           
   488                           ;LCD.c: 108: ClearLCDScreen();
   489                           
   490                           ; Regs used in _DisplayTimeToLCD: [wreg+status,2+status,0+pclath+cstack]
   491  000F  214F  120A  118A   	fcall	_ClearLCDScreen
   492                           
   493                           ;LCD.c: 111: WriteDataToLCD( (h/10)+0x30 );
   494  0012  300A               	movlw	10
   495  0013  00F2               	movwf	?___lwdiv
   496  0014  01F3               	clrf	?___lwdiv+1
   497  0015  216B               	call	PL4	;select bank 0
   498  0016  0829               	movf	DisplayTimeToLCD@h+1,w
   499  0017  00F5               	movwf	?___lwdiv+3
   500  0018  0828               	movf	DisplayTimeToLCD@h,w
   501  0019  00F4               	movwf	?___lwdiv+2
   502  001A  208A  120A  118A   	fcall	___lwdiv
   503  001D  0872               	movf	?___lwdiv,w
   504  001E  3E30               	addlw	48
   505  001F  2078  120A  118A   	fcall	_WriteDataToLCD
   506                           
   507                           ;LCD.c: 112: WriteDataToLCD( (h%10)+0x30 );
   508  0022  300A               	movlw	10
   509  0023  00F2               	movwf	?___lwmod
   510  0024  01F3               	clrf	?___lwmod+1
   511  0025  216B               	call	PL4	;select bank 0
   512  0026  0829               	movf	DisplayTimeToLCD@h+1,w
   513  0027  00F5               	movwf	?___lwmod+3
   514  0028  0828               	movf	DisplayTimeToLCD@h,w
   515  0029  00F4               	movwf	?___lwmod+2
   516  002A  20B4  120A  118A   	fcall	___lwmod
   517  002D  0872               	movf	?___lwmod,w
   518  002E  3E30               	addlw	48
   519  002F  2078  120A  118A   	fcall	_WriteDataToLCD
   520                           
   521                           ;LCD.c: 115: WriteDataToLCD(':');
   522  0032  303A               	movlw	58
   523  0033  2078  120A  118A   	fcall	_WriteDataToLCD
   524                           
   525                           ;LCD.c: 118: WriteDataToLCD( (m/10)+0x30 );
   526  0036  300A               	movlw	10
   527  0037  00F2               	movwf	?___lwdiv
   528  0038  01F3               	clrf	?___lwdiv+1
   529  0039  216B               	call	PL4	;select bank 0
   530  003A  082B               	movf	DisplayTimeToLCD@m+1,w
   531  003B  00F5               	movwf	?___lwdiv+3
   532  003C  082A               	movf	DisplayTimeToLCD@m,w
   533  003D  00F4               	movwf	?___lwdiv+2
   534  003E  208A  120A  118A   	fcall	___lwdiv
   535  0041  0872               	movf	?___lwdiv,w
   536  0042  3E30               	addlw	48
   537  0043  2078  120A  118A   	fcall	_WriteDataToLCD
   538                           
   539                           ;LCD.c: 119: WriteDataToLCD( (m%10)+0x30 );
   540  0046  300A               	movlw	10
   541  0047  00F2               	movwf	?___lwmod
   542  0048  01F3               	clrf	?___lwmod+1
   543  0049  216B               	call	PL4	;select bank 0
   544  004A  082B               	movf	DisplayTimeToLCD@m+1,w
   545  004B  00F5               	movwf	?___lwmod+3
   546  004C  082A               	movf	DisplayTimeToLCD@m,w
   547  004D  00F4               	movwf	?___lwmod+2
   548  004E  20B4  120A  118A   	fcall	___lwmod
   549  0051  0872               	movf	?___lwmod,w
   550  0052  3E30               	addlw	48
   551  0053  2078  120A  118A   	fcall	_WriteDataToLCD
   552                           
   553                           ;LCD.c: 122: WriteDataToLCD(':');
   554  0056  303A               	movlw	58
   555  0057  2078  120A  118A   	fcall	_WriteDataToLCD
   556                           
   557                           ;LCD.c: 125: WriteDataToLCD( (s/10)+0x30 );
   558  005A  300A               	movlw	10
   559  005B  00F2               	movwf	?___lwdiv
   560  005C  01F3               	clrf	?___lwdiv+1
   561  005D  216B               	call	PL4	;select bank 0
   562  005E  082D               	movf	DisplayTimeToLCD@s+1,w
   563  005F  00F5               	movwf	?___lwdiv+3
   564  0060  082C               	movf	DisplayTimeToLCD@s,w
   565  0061  00F4               	movwf	?___lwdiv+2
   566  0062  208A  120A  118A   	fcall	___lwdiv
   567  0065  0872               	movf	?___lwdiv,w
   568  0066  3E30               	addlw	48
   569  0067  2078  120A  118A   	fcall	_WriteDataToLCD
   570                           
   571                           ;LCD.c: 126: WriteDataToLCD( (s%10)+0x30 );
   572  006A  300A               	movlw	10
   573  006B  00F2               	movwf	?___lwmod
   574  006C  01F3               	clrf	?___lwmod+1
   575  006D  216B               	call	PL4	;select bank 0
   576  006E  082D               	movf	DisplayTimeToLCD@s+1,w
   577  006F  00F5               	movwf	?___lwmod+3
   578  0070  082C               	movf	DisplayTimeToLCD@s,w
   579  0071  00F4               	movwf	?___lwmod+2
   580  0072  20B4  120A  118A   	fcall	___lwmod
   581  0075  0872               	movf	?___lwmod,w
   582  0076  3E30               	addlw	48
   583  0077  2878               	ljmp	_WriteDataToLCD
   584  0078                     __end_of_DisplayTimeToLCD:	
   585  0078                     __ptext277:	
   586 ;; =============== function _InitLCD ends ============
   587                           
   588                           
   589 ;; *************** function _WriteDataToLCD *****************
   590 ;; Defined at:
   591 ;;		line 28 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\LCD.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;  LCDChar         1    wreg     unsigned char 
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  LCDChar         1    3[COMMON] unsigned char 
   596 ;; Return value:  Size  Location     Type
   597 ;;		None               void
   598 ;; Registers used:
   599 ;;		wreg, status,2, status,0, pclath, cstack
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   605 ;;      Params:         0       0       0       0       0
   606 ;;      Locals:         1       0       0       0       0
   607 ;;      Temps:          0       0       0       0       0
   608 ;;      Totals:         1       0       0       0       0
   609 ;;Total ram usage:        1 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; Hardware stack levels required when called:    2
   612 ;; This function calls:
   613 ;;		_ToggleEpinOfLCD
   614 ;; This function is called by:
   615 ;;		_DisplayTimeToLCD
   616 ;; This function uses a non-reentrant model
   617 ;;
   618  0078                     _WriteDataToLCD:	
   619                           
   620                           ; Regs used in _WriteDataToLCD: [wreg+status,2+status,0+pclath+cstack]
   621                           ;WriteDataToLCD@LCDChar stored from wreg
   622  0078  00F3               	movwf	WriteDataToLCD@LCDChar
   623  0079  216B               	call	PL4	;select bank 0
   624                           
   625                           ;LCD.c: 29: RB1 = 1;
   626  007A  300F               	movlw	15
   627  007B  1486               	bsf	6,1
   628                           
   629                           ;LCD.c: 31: PORTB &= 0x0F;
   630  007C  0586               	andwf	6,f	;volatile
   631                           
   632                           ;LCD.c: 32: PORTB |= (LCDChar&0xF0);
   633  007D  0873               	movf	WriteDataToLCD@LCDChar,w
   634  007E  39F0               	andlw	240
   635  007F  0486               	iorwf	6,f	;volatile
   636                           
   637                           ;LCD.c: 33: ToggleEpinOfLCD();
   638  0080  212F  120A  118A   	fcall	_ToggleEpinOfLCD
   639                           
   640                           ;LCD.c: 35: PORTB &= 0x0F;
   641  0083  300F               	movlw	15
   642  0084  216B               	call	PL4	;select bank 0
   643  0085  0586               	andwf	6,f	;volatile
   644                           
   645                           ;LCD.c: 36: PORTB |= ((LCDChar<<4)&0xF0);
   646  0086  0E73               	swapf	WriteDataToLCD@LCDChar,w
   647  0087  39F0               	andlw	240
   648  0088  0486               	iorwf	6,f	;volatile
   649                           
   650                           ;LCD.c: 37: ToggleEpinOfLCD();
   651  0089  292F               	ljmp	l3979
   652  008A                     __end_of_WriteDataToLCD:	
   653  008A                     __ptext282:	
   654 ;; =============== function ___lwmod ends ============
   655                           
   656                           
   657 ;; *************** function ___lwdiv *****************
   658 ;; Defined at:
   659 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;  divisor         2    2[COMMON] unsigned int 
   662 ;;  dividend        2    4[COMMON] unsigned int 
   663 ;; Auto vars:     Size  Location     Type
   664 ;;  quotient        2    6[COMMON] unsigned int 
   665 ;;  counter         1    8[COMMON] unsigned char 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  2    2[COMMON] unsigned int 
   668 ;; Registers used:
   669 ;;		wreg, status,2, status,0
   670 ;; Tracked objects:
   671 ;;		On entry : 60/0
   672 ;;		On exit  : 60/0
   673 ;;		Unchanged: FFF9F/0
   674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   675 ;;      Params:         4       0       0       0       0
   676 ;;      Locals:         3       0       0       0       0
   677 ;;      Temps:          0       0       0       0       0
   678 ;;      Totals:         7       0       0       0       0
   679 ;;Total ram usage:        7 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; Hardware stack levels required when called:    1
   682 ;; This function calls:
   683 ;;		Nothing
   684 ;; This function is called by:
   685 ;;		_DisplayTimeToLCD
   686 ;; This function uses a non-reentrant model
   687 ;;
   688  008A                     ___lwdiv:	
   689                           
   690                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   691  008A  01F6               	clrf	___lwdiv@quotient
   692  008B  01F7               	clrf	___lwdiv@quotient+1
   693  008C  0873               	movf	___lwdiv@divisor+1,w
   694  008D  0472               	iorwf	___lwdiv@divisor,w
   695  008E  1903               	skipnz
   696  008F  28AF               	goto	l3955
   697  0090  01F8               	clrf	___lwdiv@counter
   698  0091                     L3:	
   699  0091  0AF8               	incf	___lwdiv@counter,f
   700  0092  1BF3               	btfsc	___lwdiv@divisor+1,7
   701  0093  2898               	goto	l3943
   702  0094  1003               	clrc
   703  0095  0DF2               	rlf	___lwdiv@divisor,f
   704  0096  0DF3               	rlf	___lwdiv@divisor+1,f
   705  0097  2891               	goto	L3
   706  0098                     l3943:	
   707  0098  1003               	clrc
   708  0099  0DF6               	rlf	___lwdiv@quotient,f
   709  009A  0DF7               	rlf	___lwdiv@quotient+1,f
   710  009B  0873               	movf	___lwdiv@divisor+1,w
   711  009C  0275               	subwf	___lwdiv@dividend+1,w
   712  009D  1D03               	skipz
   713  009E  28A1               	goto	u225
   714  009F  0872               	movf	___lwdiv@divisor,w
   715  00A0  0274               	subwf	___lwdiv@dividend,w
   716  00A1                     u225:	
   717  00A1  1C03               	skipc
   718  00A2  28AB               	goto	L4
   719  00A3  0872               	movf	___lwdiv@divisor,w
   720  00A4  02F4               	subwf	___lwdiv@dividend,f
   721  00A5  0873               	movf	___lwdiv@divisor+1,w
   722  00A6  1C03               	skipc
   723  00A7  03F5               	decf	___lwdiv@dividend+1,f
   724  00A8  02F5               	subwf	___lwdiv@dividend+1,f
   725  00A9  1476               	bsf	___lwdiv@quotient,0
   726  00AA  1003               	clrc
   727  00AB                     L4:	
   728  00AB  0CF3               	rrf	___lwdiv@divisor+1,f
   729  00AC  0CF2               	rrf	___lwdiv@divisor,f
   730  00AD  0BF8               	decfsz	___lwdiv@counter,f
   731  00AE  2898               	goto	l3943
   732  00AF                     l3955:	
   733  00AF  0877               	movf	___lwdiv@quotient+1,w
   734  00B0  00F3               	movwf	?___lwdiv+1
   735  00B1  0876               	movf	___lwdiv@quotient,w
   736  00B2  00F2               	movwf	?___lwdiv
   737  00B3  0008               	return
   738  00B4                     __end_of___lwdiv:	
   739  00B4                     __ptext281:	
   740 ;; =============== function _ToggleEpinOfLCD ends ============
   741                           
   742                           
   743 ;; *************** function ___lwmod *****************
   744 ;; Defined at:
   745 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwmod.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;  divisor         2    2[COMMON] unsigned int 
   748 ;;  dividend        2    4[COMMON] unsigned int 
   749 ;; Auto vars:     Size  Location     Type
   750 ;;  counter         1    6[COMMON] unsigned char 
   751 ;; Return value:  Size  Location     Type
   752 ;;                  2    2[COMMON] unsigned int 
   753 ;; Registers used:
   754 ;;		wreg, status,2, status,0
   755 ;; Tracked objects:
   756 ;;		On entry : 60/0
   757 ;;		On exit  : 60/0
   758 ;;		Unchanged: FFF9F/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   760 ;;      Params:         4       0       0       0       0
   761 ;;      Locals:         1       0       0       0       0
   762 ;;      Temps:          0       0       0       0       0
   763 ;;      Totals:         5       0       0       0       0
   764 ;;Total ram usage:        5 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    1
   767 ;; This function calls:
   768 ;;		Nothing
   769 ;; This function is called by:
   770 ;;		_DisplayTimeToLCD
   771 ;; This function uses a non-reentrant model
   772 ;;
   773  00B4                     ___lwmod:	
   774                           
   775                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   776  00B4  0873               	movf	___lwmod@divisor+1,w
   777  00B5  0472               	iorwf	___lwmod@divisor,w
   778  00B6  1903               	skipnz
   779  00B7  28D3               	goto	l3975
   780  00B8  01F6               	clrf	___lwmod@counter
   781  00B9                     L1:	
   782  00B9  0AF6               	incf	___lwmod@counter,f
   783  00BA  1BF3               	btfsc	___lwmod@divisor+1,7
   784  00BB  28C0               	goto	l3967
   785  00BC  1003               	clrc
   786  00BD  0DF2               	rlf	___lwmod@divisor,f
   787  00BE  0DF3               	rlf	___lwmod@divisor+1,f
   788  00BF  28B9               	goto	L1
   789  00C0                     l3967:	
   790  00C0  0873               	movf	___lwmod@divisor+1,w
   791  00C1  0275               	subwf	___lwmod@dividend+1,w
   792  00C2  1D03               	skipz
   793  00C3  28C6               	goto	u265
   794  00C4  0872               	movf	___lwmod@divisor,w
   795  00C5  0274               	subwf	___lwmod@dividend,w
   796  00C6                     u265:	
   797  00C6  1C03               	skipc
   798  00C7  28CF               	goto	L2
   799  00C8  0872               	movf	___lwmod@divisor,w
   800  00C9  02F4               	subwf	___lwmod@dividend,f
   801  00CA  0873               	movf	___lwmod@divisor+1,w
   802  00CB  1C03               	skipc
   803  00CC  03F5               	decf	___lwmod@dividend+1,f
   804  00CD  02F5               	subwf	___lwmod@dividend+1,f
   805  00CE  1003               	clrc
   806  00CF                     L2:	
   807  00CF  0CF3               	rrf	___lwmod@divisor+1,f
   808  00D0  0CF2               	rrf	___lwmod@divisor,f
   809  00D1  0BF6               	decfsz	___lwmod@counter,f
   810  00D2  28C0               	goto	l3967
   811  00D3                     l3975:	
   812  00D3  0875               	movf	___lwmod@dividend+1,w
   813  00D4  00F3               	movwf	?___lwmod+1
   814  00D5  0874               	movf	___lwmod@dividend,w
   815  00D6  00F2               	movwf	?___lwmod
   816  00D7  0008               	return
   817  00D8                     __end_of___lwmod:	
   818  00D8                     __ptext276:	
   819 ;; =============== function _ClearLCDScreen ends ============
   820                           
   821                           
   822 ;; *************** function _InitLCD *****************
   823 ;; Defined at:
   824 ;;		line 42 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\LCD.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;		None
   829 ;; Return value:  Size  Location     Type
   830 ;;		None               void
   831 ;; Registers used:
   832 ;;		wreg, status,2, status,0, pclath, cstack
   833 ;; Tracked objects:
   834 ;;		On entry : 17F/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   838 ;;      Params:         0       0       0       0       0
   839 ;;      Locals:         0       0       0       0       0
   840 ;;      Temps:          2       0       0       0       0
   841 ;;      Totals:         2       0       0       0       0
   842 ;;Total ram usage:        2 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; Hardware stack levels required when called:    3
   845 ;; This function calls:
   846 ;;		_ToggleEpinOfLCD
   847 ;;		_WriteCommandToLCD
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852  00D8                     _InitLCD:	
   853                           
   854                           ;LCD.c: 44: RB0 = 0;
   855                           
   856                           ; Regs used in _InitLCD: [wreg+status,2+status,0+pclath+cstack]
   857                           
   858                           ;LCD.c: 45: RB1 = 0;
   859                           
   860                           ;LCD.c: 46: RB4 = 0;
   861                           
   862                           ;LCD.c: 47: RB5 = 0;
   863                           
   864                           ;LCD.c: 48: RB6 = 0;
   865                           
   866                           ;LCD.c: 49: RB7 = 0;
   867  00D8  2164  120A  118A   	fcall	PL3	;call to abstracted procedure
   868                           
   869                           ;LCD.c: 50: TRISB0 = 0;
   870  00DB  1683               	bsf	3,5	;RP0=1, select bank1
   871  00DC  3034               	movlw	52
   872                           
   873                           ;LCD.c: 51: TRISB1 = 0;
   874                           
   875                           ;LCD.c: 52: TRISB4 = 0;
   876                           
   877                           ;LCD.c: 53: TRISB5 = 0;
   878                           
   879                           ;LCD.c: 54: TRISB6 = 0;
   880                           
   881                           ;LCD.c: 55: TRISB7 = 0;
   882  00DD  2164  120A  118A   	fcall	PL3	;call to abstracted procedure
   883                           
   884                           ;LCD.c: 58: _delay((unsigned long)((40)*(4000000/4000.0)));
   885  00E0  00F5               	movwf	??_InitLCD+1
   886  00E1  30F1               	movlw	241
   887  00E2  00F4               	movwf	??_InitLCD
   888  00E3                     u307:	
   889  00E3  0BF4               	decfsz	??_InitLCD,f
   890  00E4  28E3               	goto	u307
   891  00E5  0BF5               	decfsz	??_InitLCD+1,f
   892  00E6  28E3               	goto	u307
   893  00E7  28E8               	nop2
   894                           
   895                           ;LCD.c: 60: PORTB &= 0x0F;
   896                           
   897                           ;LCD.c: 61: PORTB |= 0x30;
   898  00E8  215D  120A  118A   	fcall	PL2	;call to abstracted procedure
   899                           
   900                           ;LCD.c: 62: ToggleEpinOfLCD();
   901  00EB  212F  120A  118A   	fcall	_ToggleEpinOfLCD
   902                           
   903                           ;LCD.c: 64: _delay((unsigned long)((6)*(4000000/4000.0)));
   904  00EE  3008               	movlw	8
   905  00EF  00F5               	movwf	??_InitLCD+1
   906  00F0  30C9               	movlw	201
   907  00F1  00F4               	movwf	??_InitLCD
   908  00F2                     u317:	
   909  00F2  0BF4               	decfsz	??_InitLCD,f
   910  00F3  28F2               	goto	u317
   911  00F4  0BF5               	decfsz	??_InitLCD+1,f
   912  00F5  28F2               	goto	u317
   913  00F6  28F7               	nop2
   914                           
   915                           ;LCD.c: 66: PORTB &= 0x0F;
   916                           
   917                           ;LCD.c: 67: PORTB |= 0x30;
   918  00F7  215D  120A  118A   	fcall	PL2	;call to abstracted procedure
   919                           
   920                           ;LCD.c: 68: ToggleEpinOfLCD();
   921  00FA  212F  120A  118A   	fcall	_ToggleEpinOfLCD
   922                           
   923                           ;LCD.c: 70: _delay((unsigned long)((300)*(4000000/4000000.0)));
   924  00FD  3063               	movlw	99
   925  00FE  00F4               	movwf	??_InitLCD
   926  00FF                     u327:	
   927  00FF  0BF4               	decfsz	??_InitLCD,f
   928  0100  28FF               	goto	u327
   929  0101  2902               	nop2	;nop
   930                           
   931                           ;LCD.c: 72: PORTB &= 0x0F;
   932                           
   933                           ;LCD.c: 73: PORTB |= 0x30;
   934  0102  215D  120A  118A   	fcall	PL2	;call to abstracted procedure
   935                           
   936                           ;LCD.c: 74: ToggleEpinOfLCD();
   937  0105  212F  120A  118A   	fcall	_ToggleEpinOfLCD
   938                           
   939                           ;LCD.c: 76: _delay((unsigned long)((2)*(4000000/4000.0)));
   940  0108  3003               	movlw	3
   941  0109  00F5               	movwf	??_InitLCD+1
   942  010A  3097               	movlw	151
   943  010B  00F4               	movwf	??_InitLCD
   944  010C                     u337:	
   945  010C  0BF4               	decfsz	??_InitLCD,f
   946  010D  290C               	goto	u337
   947  010E  0BF5               	decfsz	??_InitLCD+1,f
   948  010F  290C               	goto	u337
   949  0110  2911               	nop2
   950                           
   951                           ;LCD.c: 78: PORTB &= 0x0F;
   952  0111  300F               	movlw	15
   953  0112  216B               	call	PL4	;select bank 0
   954  0113  0586               	andwf	6,f	;volatile
   955                           
   956                           ;LCD.c: 79: PORTB |= 0x20;
   957  0114  1686               	bsf	6,5	;volatile
   958                           
   959                           ;LCD.c: 80: ToggleEpinOfLCD();
   960  0115  212F  120A  118A   	fcall	_ToggleEpinOfLCD
   961                           
   962                           ;LCD.c: 82: _delay((unsigned long)((2)*(4000000/4000.0)));
   963  0118  3003               	movlw	3
   964  0119  00F5               	movwf	??_InitLCD+1
   965  011A  3097               	movlw	151
   966  011B  00F4               	movwf	??_InitLCD
   967  011C                     u347:	
   968  011C  0BF4               	decfsz	??_InitLCD,f
   969  011D  291C               	goto	u347
   970  011E  0BF5               	decfsz	??_InitLCD+1,f
   971  011F  291C               	goto	u347
   972  0120  2921               	nop2
   973                           
   974                           ;LCD.c: 84: WriteCommandToLCD(0x28);
   975  0121  3028               	movlw	40
   976  0122  213D  120A  118A   	fcall	_WriteCommandToLCD
   977                           
   978                           ;LCD.c: 85: WriteCommandToLCD(0x0c);
   979  0125  300C               	movlw	12
   980  0126  213D  120A  118A   	fcall	_WriteCommandToLCD
   981                           
   982                           ;LCD.c: 86: WriteCommandToLCD(0x01);
   983  0129  3001               	movlw	1
   984  012A  213D  120A  118A   	fcall	_WriteCommandToLCD
   985                           
   986                           ;LCD.c: 87: WriteCommandToLCD(0x06);
   987  012D  3006               	movlw	6
   988  012E  293D               	ljmp	_WriteCommandToLCD
   989  012F                     __end_of_InitLCD:	
   990  012F                     __ptext280:	
   991 ;; =============== function _Init1msecTimerInterrupt ends ============
   992                           
   993                           
   994 ;; *************** function _ToggleEpinOfLCD *****************
   995 ;; Defined at:
   996 ;;		line 5 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\LCD.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;		None               void
  1003 ;; Registers used:
  1004 ;;		wreg
  1005 ;; Tracked objects:
  1006 ;;		On entry : 60/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0
  1012 ;;      Temps:          1       0       0       0       0
  1013 ;;      Totals:         1       0       0       0       0
  1014 ;;Total ram usage:        1 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    1
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_WriteCommandToLCD
  1021 ;;		_WriteDataToLCD
  1022 ;;		_InitLCD
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025  012F                     _ToggleEpinOfLCD:	
  1026  012F                     l3979:	
  1027                           ; Regs used in _ToggleEpinOfLCD: [wreg]
  1028                           
  1029  012F  30A6               	movlw	166
  1030                           
  1031                           ;LCD.c: 6: RB0 = 1;
  1032  0130  1406               	bsf	6,0
  1033                           
  1034                           ;LCD.c: 7: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1035  0131  00F2               	movwf	??_ToggleEpinOfLCD
  1036  0132                     u357:	
  1037  0132  0BF2               	decfsz	??_ToggleEpinOfLCD,f
  1038  0133  2932               	goto	u357
  1039  0134  0064               	clrwdt
  1040  0135  216B               	call	PL4	;select bank 0
  1041                           
  1042                           ;LCD.c: 8: RB0 = 0;
  1043  0136  30A6               	movlw	166
  1044  0137  1006               	bcf	6,0
  1045                           
  1046                           ;LCD.c: 9: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1047  0138  00F2               	movwf	??_ToggleEpinOfLCD
  1048  0139                     u367:	
  1049  0139  0BF2               	decfsz	??_ToggleEpinOfLCD,f
  1050  013A  2939               	goto	u367
  1051  013B  0064               	clrwdt
  1052  013C  0008               	return
  1053  013D                     __end_of_ToggleEpinOfLCD:	
  1054  013D                     __ptext278:	
  1055 ;; =============== function _WriteDataToLCD ends ============
  1056                           
  1057                           
  1058 ;; *************** function _WriteCommandToLCD *****************
  1059 ;; Defined at:
  1060 ;;		line 14 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\LCD.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  Command         1    wreg     unsigned char 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  Command         1    3[COMMON] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;		None               void
  1067 ;; Registers used:
  1068 ;;		wreg, status,2, status,0, pclath, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1074 ;;      Params:         0       0       0       0       0
  1075 ;;      Locals:         1       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0
  1077 ;;      Totals:         1       0       0       0       0
  1078 ;;Total ram usage:        1 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    2
  1081 ;; This function calls:
  1082 ;;		_ToggleEpinOfLCD
  1083 ;; This function is called by:
  1084 ;;		_InitLCD
  1085 ;;		_ClearLCDScreen
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088  013D                     _WriteCommandToLCD:	
  1089                           
  1090                           ; Regs used in _WriteCommandToLCD: [wreg+status,2+status,0+pclath+cstack]
  1091                           ;WriteCommandToLCD@Command stored from wreg
  1092  013D  00F3               	movwf	WriteCommandToLCD@Command
  1093  013E  216B               	call	PL4	;select bank 0
  1094                           
  1095                           ;LCD.c: 15: RB1 = 0;
  1096  013F  300F               	movlw	15
  1097  0140  1086               	bcf	6,1
  1098                           
  1099                           ;LCD.c: 17: PORTB &= 0x0F;
  1100  0141  0586               	andwf	6,f	;volatile
  1101                           
  1102                           ;LCD.c: 18: PORTB |= (Command&0xF0);
  1103  0142  0873               	movf	WriteCommandToLCD@Command,w
  1104  0143  39F0               	andlw	240
  1105  0144  0486               	iorwf	6,f	;volatile
  1106                           
  1107                           ;LCD.c: 19: ToggleEpinOfLCD();
  1108  0145  212F  120A  118A   	fcall	_ToggleEpinOfLCD
  1109                           
  1110                           ;LCD.c: 21: PORTB &= 0x0F;
  1111  0148  300F               	movlw	15
  1112  0149  216B               	call	PL4	;select bank 0
  1113  014A  0586               	andwf	6,f	;volatile
  1114                           
  1115                           ;LCD.c: 22: PORTB |= ((Command<<4)&0xF0);
  1116  014B  0E73               	swapf	WriteCommandToLCD@Command,w
  1117  014C  39F0               	andlw	240
  1118  014D  0486               	iorwf	6,f	;volatile
  1119                           
  1120                           ;LCD.c: 23: ToggleEpinOfLCD();
  1121  014E  292F               	ljmp	l3979
  1122  014F                     __end_of_WriteCommandToLCD:	
  1123  014F                     __ptext275:	
  1124 ;; =============== function _DisplayTimeToLCD ends ============
  1125                           
  1126                           
  1127 ;; *************** function _ClearLCDScreen *****************
  1128 ;; Defined at:
  1129 ;;		line 99 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\LCD.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;		None               void
  1136 ;; Registers used:
  1137 ;;		wreg, status,2, status,0, pclath, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 60/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1143 ;;      Params:         0       0       0       0       0
  1144 ;;      Locals:         0       0       0       0       0
  1145 ;;      Temps:          2       0       0       0       0
  1146 ;;      Totals:         2       0       0       0       0
  1147 ;;Total ram usage:        2 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    3
  1150 ;; This function calls:
  1151 ;;		_WriteCommandToLCD
  1152 ;; This function is called by:
  1153 ;;		_DisplayTimeToLCD
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156  014F                     _ClearLCDScreen:	
  1157                           
  1158                           ;LCD.c: 100: WriteCommandToLCD(0x01);
  1159                           
  1160                           ; Regs used in _ClearLCDScreen: [wreg+status,2+status,0+pclath+cstack]
  1161  014F  3001               	movlw	1
  1162  0150  213D  120A  118A   	fcall	_WriteCommandToLCD
  1163                           
  1164                           ;LCD.c: 101: _delay((unsigned long)((2)*(4000000/4000.0)));
  1165  0153  3003               	movlw	3
  1166  0154  00F5               	movwf	??_ClearLCDScreen+1
  1167  0155  3097               	movlw	151
  1168  0156  00F4               	movwf	??_ClearLCDScreen
  1169  0157                     u297:	
  1170  0157  0BF4               	decfsz	??_ClearLCDScreen,f
  1171  0158  2957               	goto	u297
  1172  0159  0BF5               	decfsz	??_ClearLCDScreen+1,f
  1173  015A  2957               	goto	u297
  1174  015B  295C               	nop2
  1175  015C  0008               	return
  1176  015D                     __end_of_ClearLCDScreen:	
  1177  015D                     PL2:	
  1178  015D  300F               	movlw	15
  1179  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1180  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1181  0160  0586               	andwf	6,f	;volatile
  1182  0161  3030               	movlw	48
  1183  0162  0486               	iorwf	6,f	;volatile
  1184  0163  0008               	return
  1185  0164                     PL3:	
  1186  0164  1006               	bcf	6,0
  1187  0165  1086               	bcf	6,1
  1188  0166  1206               	bcf	6,4
  1189  0167  1286               	bcf	6,5
  1190  0168  1306               	bcf	6,6
  1191  0169  1386               	bcf	6,7
  1192  016A  0008               	return
  1193  016B                     PL4:	
  1194  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1195  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1196  016D  0008               	return
  1197                           
  1198                           	psect	text279
  1199  01DB                     __ptext279:	
  1200 ;; =============== function _WriteCommandToLCD ends ============
  1201                           
  1202                           
  1203 ;; *************** function _Init1msecTimerInterrupt *****************
  1204 ;; Defined at:
  1205 ;;		line 24 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\Timer.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;		None
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;		None
  1210 ;; Return value:  Size  Location     Type
  1211 ;;		None               void
  1212 ;; Registers used:
  1213 ;;		wreg, status,2, status,0, pclath, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 60/20
  1217 ;;		Unchanged: FFF9F/0
  1218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1219 ;;      Params:         0       0       0       0       0
  1220 ;;      Locals:         0       0       0       0       0
  1221 ;;      Temps:          0       0       0       0       0
  1222 ;;      Totals:         0       0       0       0       0
  1223 ;;Total ram usage:        0 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; Hardware stack levels required when called:    2
  1226 ;; This function calls:
  1227 ;;		_InitTimer0
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232  01DB                     _Init1msecTimerInterrupt:	
  1233                           
  1234                           ;Timer.c: 25: InitTimer0();
  1235                           
  1236                           ; Regs used in _Init1msecTimerInterrupt: [wreg+status,2+status,0+pclath+cstack]
  1237  01DB  29DC               	ljmp	l3919
  1238  01DC                     __end_of_Init1msecTimerInterrupt:	
  1239  01DC                     __ptext283:	
  1240 ;; =============== function ___lwdiv ends ============
  1241                           
  1242                           
  1243 ;; *************** function _InitTimer0 *****************
  1244 ;; Defined at:
  1245 ;;		line 14 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\Timer.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;		None               void
  1252 ;; Registers used:
  1253 ;;		wreg, status,2, status,0
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 60/20
  1257 ;;		Unchanged: FFF9F/0
  1258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1259 ;;      Params:         0       0       0       0       0
  1260 ;;      Locals:         0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0
  1262 ;;      Totals:         0       0       0       0       0
  1263 ;;Total ram usage:        0 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    1
  1266 ;; This function calls:
  1267 ;;		Nothing
  1268 ;; This function is called by:
  1269 ;;		_Init1msecTimerInterrupt
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272  01DC                     _InitTimer0:	
  1273  01DC                     l3919:	
  1274                           ; Regs used in _InitTimer0: [wreg+status,2+status,0]
  1275                           
  1276                           
  1277                           ;Timer.c: 16: OPTION_REG &= 0xC1;
  1278  01DC  30C1               	movlw	193
  1279  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  1280  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  1281  01DF  0581               	andwf	1,f	;volatile
  1282                           
  1283                           ;Timer.c: 18: T0IE = 1;
  1284  01E0  168B               	bsf	11,5
  1285                           
  1286                           ;Timer.c: 19: GIE = 1;
  1287  01E1  178B               	bsf	11,7
  1288  01E2  0008               	return
  1289  01E3                     __end_of_InitTimer0:	
  1290                           
  1291                           	psect	text284
  1292  016E                     __ptext284:	
  1293 ;; =============== function _InitTimer0 ends ============
  1294                           
  1295                           
  1296 ;; *************** function _UpdateTimeCounters *****************
  1297 ;; Defined at:
  1298 ;;		line 32 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\Timer.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;		None               void
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 60/0
  1310 ;;		Unchanged: FFF9F/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1312 ;;      Params:         0       0       0       0       0
  1313 ;;      Locals:         0       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0
  1315 ;;      Totals:         0       0       0       0       0
  1316 ;;Total ram usage:        0 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_main
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325  016E                     _UpdateTimeCounters:	
  1326                           
  1327                           ;Timer.c: 33: if (msCounter==1000)
  1328                           
  1329                           ; Regs used in _UpdateTimeCounters: [wreg+status,2+status,0]
  1330  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1331  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1332  0170  0825               	movf	_msCounter+1,w
  1333  0171  3A03               	xorlw	3
  1334  0172  30E8               	movlw	232
  1335  0173  1903               	skipnz
  1336  0174  0624               	xorwf	_msCounter,w
  1337  0175  1D03               	skipz
  1338  0176  297C               	goto	l3903
  1339                           
  1340                           ;Timer.c: 34: {
  1341                           ;Timer.c: 35: secCounter++;
  1342  0177  0AA6               	incf	_secCounter,f
  1343  0178  1903               	skipnz
  1344  0179  0AA7               	incf	_secCounter+1,f
  1345                           
  1346                           ;Timer.c: 36: msCounter=0;
  1347  017A  01A4               	clrf	_msCounter
  1348  017B  01A5               	clrf	_msCounter+1
  1349  017C                     l3903:	
  1350                           
  1351                           ;Timer.c: 37: }
  1352                           ;Timer.c: 39: if(secCounter==60)
  1353  017C  0826               	movf	_secCounter,w
  1354  017D  3A3C               	xorlw	60
  1355  017E  0427               	iorwf	_secCounter+1,w
  1356  017F  1D03               	skipz
  1357  0180  2986               	goto	l3909
  1358                           
  1359                           ;Timer.c: 40: {
  1360                           ;Timer.c: 41: minCounter++;
  1361  0181  0AA2               	incf	_minCounter,f
  1362  0182  1903               	skipnz
  1363  0183  0AA3               	incf	_minCounter+1,f
  1364                           
  1365                           ;Timer.c: 42: secCounter=0;
  1366  0184  01A6               	clrf	_secCounter
  1367  0185  01A7               	clrf	_secCounter+1
  1368  0186                     l3909:	
  1369                           
  1370                           ;Timer.c: 43: }
  1371                           ;Timer.c: 45: if(minCounter==60)
  1372  0186  0822               	movf	_minCounter,w
  1373  0187  3A3C               	xorlw	60
  1374  0188  0423               	iorwf	_minCounter+1,w
  1375  0189  1D03               	skipz
  1376  018A  2990               	goto	l3915
  1377                           
  1378                           ;Timer.c: 46: {
  1379                           ;Timer.c: 47: hrCounter++;
  1380  018B  0AA0               	incf	_hrCounter,f
  1381  018C  1903               	skipnz
  1382  018D  0AA1               	incf	_hrCounter+1,f
  1383                           
  1384                           ;Timer.c: 48: minCounter=0;
  1385  018E  01A2               	clrf	_minCounter
  1386  018F  01A3               	clrf	_minCounter+1
  1387  0190                     l3915:	
  1388                           
  1389                           ;Timer.c: 49: }
  1390                           ;Timer.c: 51: if(hrCounter==24)
  1391  0190  0820               	movf	_hrCounter,w
  1392  0191  3A18               	xorlw	24
  1393  0192  0421               	iorwf	_hrCounter+1,w
  1394  0193  1D03               	skipz
  1395  0194  0008               	return
  1396                           
  1397                           ;Timer.c: 52: {
  1398                           ;Timer.c: 53: hrCounter = 0;
  1399  0195  01A0               	clrf	_hrCounter
  1400  0196  01A1               	clrf	_hrCounter+1
  1401  0197  0008               	return
  1402  0198                     __end_of_UpdateTimeCounters:	
  1403                           
  1404                           	psect	text285
  1405  01BE                     __ptext285:	
  1406 ;; =============== function _UpdateTimeCounters ends ============
  1407                           
  1408                           
  1409 ;; *************** function _ISR *****************
  1410 ;; Defined at:
  1411 ;;		line 6 in file "C:\Users\Saeed\Desktop\PIC16F877 Digital Clock Code\Code\ISR.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;		None               void
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: FFF9F/0
  1424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1425 ;;      Params:         0       0       0       0       0
  1426 ;;      Locals:         0       0       0       0       0
  1427 ;;      Temps:          2       0       0       0       0
  1428 ;;      Totals:         2       0       0       0       0
  1429 ;;Total ram usage:        2 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		Interrupt level 1
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437  01BE                     _ISR:	
  1438                           
  1439                           ;ISR.c: 7: if(T0IF)
  1440  01BE  1D0B               	btfss	11,2
  1441  01BF  29C8               	goto	i1l2628
  1442                           
  1443                           ;ISR.c: 8: {
  1444                           ;ISR.c: 9: TMR0 = 0x08;
  1445  01C0  3008               	movlw	8
  1446  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1447  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1448  01C3  0081               	movwf	1	;volatile
  1449                           
  1450                           ;ISR.c: 10: T0IF = 0;
  1451  01C4  110B               	bcf	11,2
  1452                           
  1453                           ;ISR.c: 11: msCounter++;
  1454  01C5  0AA4               	incf	_msCounter,f
  1455  01C6  1903               	skipnz
  1456  01C7  0AA5               	incf	_msCounter+1,f
  1457  01C8                     i1l2628:	
  1458  01C8  0871               	movf	??_ISR+1,w
  1459  01C9  008A               	movwf	10
  1460  01CA  0E70               	swapf	??_ISR^(0+-128),w
  1461  01CB  0083               	movwf	3
  1462  01CC  0EFE               	swapf	126,f
  1463  01CD  0E7E               	swapf	126,w
  1464  01CE  0009               	retfie
  1465  01CF                     __end_of_ISR:	
  1466                           
  1467                           	psect	intentry
  1468  0004                     __pintentry:	
  1469                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1470                           
  1471  0004                     interrupt_function:	
  1472  007E                     saved_w	set	btemp
  1473  0004  00FE               	movwf	btemp
  1474  0005  0E03               	swapf	3,w
  1475  0006  00F0               	movwf	??_ISR
  1476  0007  080A               	movf	10,w
  1477  0008  00F1               	movwf	??_ISR+1
  1478  0009  120A  118A  29BE   	ljmp	_ISR
  1479                           
  1480                           	psect	text286
  1481  0000                     __ptext286:	
  1482 ;; =============== function _ISR ends ============
  1483                           
  1484  007E                     btemp	set	126	;btemp
  1485  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Nov 25 00:44:55 2012

                             l643 0000                               l652 0000                               l661 0000  
                             l646 0000                               l664 0000                               l649 0000  
                             _GIE 005F                               _RB0 0030                               _RB1 0031  
                             _RB4 0034                               _RB5 0035                               _RB6 0036  
                             _RB7 0037                               u225 00A1                               u307 00E3  
                             u317 00F2                               u327 00FF                               u265 00C6  
                             u337 010C                               u347 011C                               _ISR 01BE  
                             u357 0132                               u367 0139                               u297 0157  
                            ?_ISR 0070                              l1322 01B8                              l4001 0000  
                            l4003 0000                              l4011 0000                              l4005 0000  
                            l4021 0000                              l4013 0000                              l4007 0000  
                            l4031 0000                              l4023 0000                              l4015 0000  
                            l4009 0000                              l4041 0000                              l4033 0000  
                            l4025 0000                              l4017 0000                              l4043 0000  
                            l4035 0000                              l4027 0000                              l4019 0000  
                            l4051 0000                              l4045 0000                              l4037 0000  
                            l4029 0000                              l4053 0000                              l4047 0000  
                            l4039 0000                              l4055 0000                              l4049 0000  
                            l4057 0000                              l4059 01A2                              l3284 0000  
                            l3294 0000                              l3901 0000                              l1974 0000  
                            l3903 017C                              l3913 0000                              l3921 0000  
                            l1977 0000                              l3915 0190                              l3907 0000  
                            l3923 0000                              l3909 0186                              l3933 0000  
                            l3919 01DC                              l3943 0098                              l3935 0000  
                            l3953 0000                              l3945 0000                              l3955 00AF  
                            l3949 0000                              l3973 0000                              l3981 0000  
                            l3967 00C0                              l3975 00D3                              l3959 0000  
                            l3983 0000                              l3991 0000                              l3897 0000  
                            l3985 0000                              l3993 0000                              l3979 012F  
                            l3995 0000                              l3987 0000                              l3997 0000  
                            l3989 0000                              l3999 0000                              _T0IE 005D  
                            _T0IF 005A                              _TMR0 0001                              _main 0198  
                            btemp 007E                              start 000C                   __end_of_InitLCD 012F  
                           ??_ISR 0070                             ?_main 0070                   __end_of___lwdiv 00B4  
                 __end_of___lwmod 00D8                             _PORTB 0006                             pclath 000A  
__size_of_Init1msecTimerInterrupt 0001                             status 0003           __size_of_WriteDataToLCD 0012  
                           wtemp0 007E                   _ToggleEpinOfLCD 012F                        _InitTimer0 01DC  
                    __end_of_main 01BE                            ??_main 0079                  ??_ClearLCDScreen 0074  
                          i1l2628 01C8                            i1l3931 0000                            i1l3925 0000  
                          i1l3929 0000                 DisplayTimeToLCD@h 0028                 DisplayTimeToLCD@m 002A  
               DisplayTimeToLCD@s 002C                            _TRISB0 0430                            _TRISB1 0431  
                          _TRISB4 0434                            _TRISB5 0435                            _TRISB6 0436  
                          _TRISB7 0437                         ??_InitLCD 0074                         ??___lwdiv 0076  
                       ??___lwmod 0076                            saved_w 007E        __end_of_UpdateTimeCounters 0198  
         __end_of_ToggleEpinOfLCD 013D         __size_of_DisplayTimeToLCD 0069                       ?_InitTimer0 0070  
                  __pcstackCOMMON 0070          WriteCommandToLCD@Command 0073           _Init1msecTimerInterrupt 01DB  
                      __pbssBANK0 0020                    _WriteDataToLCD 0078                        __pmaintext 0198  
           WriteDataToLCD@LCDChar 0073                        __pintentry 0004               __size_of_InitTimer0 0007  
          __end_of_WriteDataToLCD 008A                  ?_ToggleEpinOfLCD 0070                           _InitLCD 00D8  
                      _minCounter 0022                        _secCounter 0026                           ___lwdiv 008A  
                         ___lwmod 00B4                      __size_of_ISR 0011         ??_Init1msecTimerInterrupt 0072  
            end_of_initialization 01D7                   ?_WriteDataToLCD 0070                  _DisplayTimeToLCD 000F  
              _UpdateTimeCounters 016E                      ??_InitTimer0 0072               ?_UpdateTimeCounters 0070  
             start_initialization 01CF                       __end_of_ISR 01CF              ??_UpdateTimeCounters 0072  
              __end_of_InitTimer0 01E3           __size_of_ClearLCDScreen 000E                     __pcstackBANK0 0028  
                        ?_InitLCD 0070                  ___lwdiv@dividend 0074                         __ptext280 012F  
                       __ptext281 00B4                         __ptext273 0000                         __ptext282 008A  
                       __ptext274 000F                         __ptext283 01DC                         __ptext275 014F  
                       __ptext284 016E                         __ptext276 00D8                         __ptext285 01BE  
                       __ptext277 0078                         __ptext286 0000                         __ptext278 013D  
                       __ptext279 01DB                         _hrCounter 0020                          ?___lwdiv 0072  
                        ?___lwmod 0072                  ??_WriteDataToLCD 0073                         _msCounter 0024  
        __end_of_DisplayTimeToLCD 0078                  ___lwdiv@quotient 0076                 interrupt_function 0004  
        __size_of_ToggleEpinOfLCD 000E                    _ClearLCDScreen 014F                 _WriteCommandToLCD 013D  
              ?_WriteCommandToLCD 0070                  __size_of_InitLCD 0057               ??_WriteCommandToLCD 0073  
                __size_of___lwdiv 002A                  __size_of___lwmod 0024          ?_Init1msecTimerInterrupt 0070  
                 ___lwdiv@divisor 0072            __end_of_ClearLCDScreen 015D                   ___lwdiv@counter 0078  
       __end_of_WriteCommandToLCD 014F                     __size_of_main 0026                 ??_ToggleEpinOfLCD 0072  
                 ?_ClearLCDScreen 0070       __size_of_UpdateTimeCounters 002A                          intlevel1 0000  
                ___lwmod@dividend 0074   __end_of_Init1msecTimerInterrupt 01DC                        _OPTION_REG 0081  
                 ___lwmod@divisor 0072                   ___lwmod@counter 0076                 ?_DisplayTimeToLCD 0028  
      __size_of_WriteCommandToLCD 0012                ??_DisplayTimeToLCD 0079  
